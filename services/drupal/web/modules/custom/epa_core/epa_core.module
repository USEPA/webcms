<?php

/**
 * @file
 * Contains epa_core.module.
 */

use Drupal\Component\Render\PlainTextOutput;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\link\LinkItemInterface;
use Drupal\media\Entity\Media;
use Drupal\node\NodeInterface;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Component\Utility\UrlHelper;
use Drupal\views\ViewExecutable;
use Drupal\search_api\Plugin\views\query\SearchApiQuery;

/**
 * Implements hook_theme().
 */
function epa_core_theme($existing, $type, $theme, $path) {
  return [
    'hierarchical_term_facet_formatter' => [
      'variables' => [
        'terms' => [],
        'wrapper' => '',
        'separator' => ' Â» ',
        'link' => FALSE,
        'facet_source' => ''
      ],
      'file' => 'epa_core.theme.inc',
    ],
  ];
}

/**
 * Implements hook_requirements().
 */
function epa_core_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    $release = getenv('GIT_COMMIT');
    if ($tag = getenv('GIT_TAG')) {
      $release = $tag;
    }
    if (empty($release)) {
      $release = 'Neither the GIT_TAG nor GIT_COMMIT environment variables have been set.';
    }
    $requirements['epa_core_release_version'] = array(
      'title' => t('EPA Drupal WebCMS Release Version'),
      'value' => $release,
      'severity' => REQUIREMENT_OK,
    );
  }

  return $requirements;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Code borrowed from https://www.drupal.org/project/drupal/issues/2885278#comment-13349245
 */
function epa_core_menu_local_tasks_alter(&$local_tasks, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  if ($route_name === 'entity.node.revision') {
    // Show the same local tasks on node revision pages as the ones displayed
    // on node canonical pages.
    $node_canonical_local_tasks = \Drupal::service('plugin.manager.menu.local_task')
      ->getLocalTasks('entity.node.canonical');
    $local_tasks['tabs'][0] = $node_canonical_local_tasks['tabs'];

    // Mark the version history local task as active when viewing a node
    // revision.
    foreach ($local_tasks['tabs'][0] as $route_name => &$tab) {
      $tab['#active'] = $route_name === 'entity.node.version_history';

    }

    $cacheability = CacheableMetadata::createFromObject($cacheability)
      ->merge($node_canonical_local_tasks['cacheability']);
  }

  if (\Drupal::moduleHandler()->moduleExists('access_unpublished') && \Drupal::currentUser()->isAnonymous()) {
    // If the access_unpublished module is enabled and the user is anonymous, disable all local tasks.
    $tokenGetter = \Drupal::service('access_unpublished.token_getter');
    if ($token = $tokenGetter->getToken()) {
      if (_is_access_token_valid($token)) {
        unset($local_tasks['tabs']);
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * - Used to auto generate descriptions and keywords for news releases.
 * - Hide path field.
 * - Hide type field on news releases
 * - Hide type field on commentary
 *
 * @see \Drupal\epa_workflow\EPAPublished::process()
 */
function epa_core_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Creates a copy of the Save button and places it promptly in the revision info section of the form.
  if (isset($form['actions']['submit'])) {
    $submit_copy = $form['actions']['submit'];
    $submit_copy['#group'] = 'revision_information';
    $submit_copy['#weight'] = 100;
    $form['revision_information']['actions'] = [
      '#type' => "actions",
      'submit' => $submit_copy,
    ];
  }

  // Change the "Revision log message" label to say "Revision notes".
  $form['revision_log']['widget'][0]['value']['#title'] = t("Revision notes");

  if (isset($form['field_in_page_navigation'])) {
    $form['field_in_page_navigation']['#states']['!enabled']['input[name="field_wide_template[value]"]'] = ['checked' => TRUE];
  }

  switch ($form_id) {
    case 'node_news_release_form':
    case 'node_news_release_edit_form':
      $node = $form_state->getFormObject()->getEntity();

      // Validate if the current subjects and their ancestors match what is
      // currently in the keywords field.
      $keywords = [];
      foreach ($node->field_keywords as $keyword) {
        if ($keyword->entity) {
          $keywords[] = $keyword->entity->label();
        }
      }
      sort($keywords);
      $keywords = implode(', ', $keywords);

      $default_keyword_ids = [];
      foreach ($node->field_subjects as $subject) {
        $default_keyword_ids[] = ['target_id' => $subject->target_id];
      }
      $default_keywords = _epa_core_load_taxonomy_hierarchy($default_keyword_ids);
      sort($default_keywords);
      $default_keywords = implode(', ', $default_keywords);

      $form['generate_keywords'] = [
        '#type' => 'checkbox',
        '#title' => t('Generate automatic keywords'),
        '#default_value' => $keywords == $default_keywords,
        '#description' => t('Uncheck this to add custom keywords above.'),
        '#weight' => isset($form['field_keywords']['#weight']) ? (int) $form['field_keywords']['#weight'] - 0.5 : 8.5,
      ];

      // Use states to disable fields when checked.
      $form['field_keywords']['#states']['!enabled']['input[name="generate_keywords"]'] = ['checked' => TRUE];

      // Add in the default autocomplete validators since they aren't
      // initially set on the form and setting our custom validation handler
      // will prevent them from being set at all.
      $autocomplete_info = \Drupal::service('element_info')->getInfo('entity_autocomplete');
      $form['field_keywords']['widget']['target_id']['#element_validate'] = $autocomplete_info['#element_validate'];

      $form['field_type']['#access'] = FALSE;

      // Add a custom validator for automated keyword generation.
      array_unshift($form['field_keywords']['widget']['target_id']['#element_validate'], 'epa_core_new_release_keywords_validate');

      break;
    case 'node_commentary_form':
    case 'node_commentary_edit_form':
      $form['field_type']['#access'] = FALSE;
      break;

    case 'node_public_notice_edit_form':
      // Custom validation to check proposed location.
      $form['#validate'][] = 'epa_core_location_proposed_other_form_validate';
      break;
  }
}

/**
 * Element validation: new release keywords field.
 */
function epa_core_new_release_keywords_validate(array &$element, FormStateInterface $form_state, $form) {
  if (!$form_state->getErrors() && !empty($form_state->getValue('generate_keywords'))) {
    $subjects = $form_state->getValue('field_subjects');
    // Logic to collect subjects from form_hierarchical_select_process().
    $default_keywords = [];
    if (!empty($subjects)) {
      $default_keywords = _epa_core_load_taxonomy_hierarchy($subjects);
    }
    $element['#value'] = implode(', ', $default_keywords);
    $form_state->setValueforElement($element, ['target_id' => $element['#value']]);
  }
}

/**
 * Logic to load in terms and their ancestors for keyword generation.
 */
function _epa_core_load_taxonomy_hierarchy($terms) {
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $default_keywords = [];
  foreach ($terms as $term) {
    $term_id = $term['target_id'];
    $term_object = $term_storage->load($term_id);
    if ($term_object) {
      $default_keywords[] = $term_object->label();
      $ancestors = $term_storage->loadAllParents($term_id);
      if (!empty($ancestors)) {
        foreach ($ancestors as $ancestor) {
          $default_keywords[] = $ancestor->label();
        }
      }
    }
  }
  return array_unique($default_keywords);
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 *
 * Move pseudo fields into relevant groups.
 */
function epa_core_field_group_build_pre_render_alter(&$element) {
  if (isset($element['generate_description'])) {
    $element['#group_children']['generate_description'] = 'group_metadata';
    $element['group_additional_fields']['group_metadata']['generate_description'] = $element['generate_description'];
    unset($element['generate_description']);
  }
  if (isset($element['generate_keywords'])) {
    $element['#group_children']['generate_keywords'] = 'group_metadata';
    $element['group_additional_fields']['group_metadata']['generate_keywords'] = $element['generate_keywords'];
    unset($element['generate_keywords']);
  }
}

/**
 * Implements hook_token_info().
 */
function epa_core_token_info() {
  $machine_name_token = [
    'name' => t('Machine name alias'),
    'description' => t('Machine name field.'),
  ];
  $contact_us_link = [
    'name' => t('Contact Us Link'),
    'description' => t('The link to a Web Area\'s contact form.'),
  ];
  $footer_last_updated = [
    'name' => t('Last updated'),
    'description' => t('The current entity\'s latest updated date.'),
    'type' => 'date'
  ];
  $view_argument_1 = [
    'name' => 'The first argument of the view'
  ];
  $term_description = [
    'name' => t('Term description'),
    'description' => t('Default term description.'),
  ];

  $tokens['tokens'] = [
    'node' => [
      'machine-name-alias' => $machine_name_token,
      'epa-addtocal-description' => [
        'name' => t('EPA event description'),
        'description' => t('Custom EPA event description suitable for Addtocal'),
      ]
    ],
    'group' => [
      'machine-name-alias' => $machine_name_token,
    ],
    'current-page' => [
      'contact-us-link' => $contact_us_link,
      'footer-last-updated' => $footer_last_updated,
    ],
    'view' => [
      'argument-1' => $view_argument_1,
    ],
    'term' => [
      'term-description' => $term_description,
    ],
  ];
  return $tokens;
}

/**
 * Implements hook_tokens().
 */
function epa_core_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {

  $replacements = [];

  foreach ($tokens as $name => $original) {

    // custom date format handling
    if (stripos($name, 'footer-last-updated') !== FALSE ) {
      $parts = explode(':', $name);
      $defaults = [
        $parts[0],
        'medium',
        ''
      ];
      $parts = array_replace($defaults, $parts);
      $name = $parts[0];
    }

    switch ($name) {
      case 'machine-name-alias':
        if (($type == 'node' && !empty($data['node'])) || ($type == 'group' && !empty($data['group']))) {
          $replacements[$original] = \Drupal::service('epa_core.helper')->getEntityMachineNameAlias($data[$type]);
        }
        break;
      case 'epa-addtocal-description':
        if ($type == 'node' && !empty($data['node'])) {
          $add_to_cal_components = [];
          $node = $data['node'];
          if ($node->bundle() == 'event') {
            $description = $node->get('field_add_to_cal_description')->value;
            if (empty($description)) {
              $description = $node->get('field_description')->value;
            }
            if ($description) {
              $add_to_cal_components[] = $description;
            }

            $event_type = Term::load($node->get('field_event_type')->target_id)->getName();
            if (!empty($event_type)) {
              $add_to_cal_components[] = t("Event Type: @event_type", ['@event_type' => $event_type]);
            }
            $event_host = $node->get('field_event_host')->value;
            if (!empty($event_host)) {
              $add_to_cal_components[] = t("Event host: @event_host", ['@event_host' => $event_host]);
            }
            $links_string = '';
            foreach ($node->field_links as $link) {
              $url = $link->getUrl();
              $url->setAbsolute();
              $title = $link->title;
              $links_string .= ($title ? $title .': ':''). $url->toString() ."\n";
            }
            if (!empty($links_string)) {
              $add_to_cal_components[] = t("Links:\n @links",['@links'=> $links_string]);
            }
          }
          $replacements[$original] = implode("\n\n", $add_to_cal_components);
        }
        break;
      case 'contact-us-link':
        $bubbleable_metadata->addCacheContexts(['url']);
        $node = \Drupal::routeMatch()->getParameter('node');
        if (isset($node)) {
          // load the group's contact form information
          $groups = \Drupal::service('epa_web_areas.web_areas_helper')
            ->getNodeReferencingGroups($node);
          foreach ($groups as $group) {
            if ($forms = $group->field_contact_us_form->referencedEntities()) {
              /** @var \Drupal\node\Entity\Node $contact_form */
              $contact_form = reset($forms);
              $bubbleable_metadata->addCacheableDependency($group);
              $bubbleable_metadata->addCacheableDependency($contact_form);
              $url = $contact_form ? Url::fromRoute('entity.node.canonical', ['node' => $contact_form->id()]) : NULL;
              $replacements[$original] = $url ? Link::fromTextAndUrl($contact_form->getTitle(), $url)
                ->toString() : $original;
            }
          }
        }
        break;
      case 'contact-us-header-link':
        $bubbleable_metadata->addCacheContexts(['url']);
        $node = \Drupal::routeMatch()->getParameter('node');
        if (isset($node)) {
          // load the group's contact form information
          $groups = \Drupal::service('epa_web_areas.web_areas_helper')
            ->getNodeReferencingGroups($node);
          foreach ($groups as $group) {
            $bubbleable_metadata->addCacheableDependency($group);
            $contact_form = $group->field_contact_us_form->target_id;
            $url = $contact_form ? Url::fromRoute('entity.node.canonical', ['node' => $contact_form]) : NULL;
            if ($url) {
              $link = Link::fromTextAndUrl(t('Contact Us'), $url)->toRenderable();
              $link['#attributes'] = ['class' => array('header-link')];
            }
            $replacements[$original] = $url ? \Drupal::service('renderer')->render($link) : $original;
          }
        }
        break;
      case 'footer-last-updated':
        $node = \Drupal::routeMatch()->getParameter('node');
        $bubbleable_metadata->addCacheContexts(['url']);
        if (isset($node)) {
          $bubbleable_metadata->addCacheableDependency($node);
        }
        if (isset($node) && !$node->field_last_published->isEmpty()) {
          $replacements[$original] = t('Last updated on @date', ['@date' => \Drupal::service('date.formatter')->format($node->field_last_published->date->getTimestamp(), $parts[1], $parts[2])]);
        }
        else {
          $replacements[$original] = '';
        }
        break;
      case 'argument-1':
        if ($type == 'view' && !empty($data['view'])) {
          $view = $data['view'];
          $args = $view->args;
          if (!empty($args)) {
            $replacements[$original] = $args[0];
          }
        }
        break;
      case 'term-description':
        if ($type == 'term' && !empty($data['term'])) {
          $config = \Drupal::config('epa_core.settings');
          $term_description = $config->get('default_description');
          // Term description can contain tokens, so we need to replace them.
          $token = \Drupal::token();
          $term_description = PlainTextOutput::renderFromHtml($token->replace($term_description, ['term' => $data['term']]));
          $replacements[$original] = $term_description;
        }
        break;
    }
  }
  return $replacements;
}


/**
 * Implements hook_entity_revision_delete().
 * Invalidate cache tags for a node when its revision is deleted.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function epa_core_entity_revision_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node') {
    Cache::invalidateTags(['node:' . $entity->id()]);
  }

  $t_args = [
    '@typeid' => $entity->getEntityTypeId() ? $entity->getEntityTypeId() : NULL,
    '@type' => $entity->bundle() ? $entity->bundle() : NULL,
    '@id' => $entity->id() ? $entity->id() : NULL,
    '@vid' => $entity->getRevisionId() ? $entity->getRevisionId() : NULL,
    '%label' => $entity->label() ? $entity->label() : NULL,
  ];
  \Drupal::logger('epa_core')
    ->notice(t('@typeid entity revision deleted. (Entity type: @type; Entity ID: @id; Revision ID: @vid; Entity label: %label)', $t_args));
}

/**
 * Implements hook_entity_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function epa_core_entity_delete(EntityInterface $entity) {
  $t_args = [
    '@typeid' => $entity->getEntityTypeId() ? $entity->getEntityTypeId() : NULL,
    '@bundle' => $entity->bundle() ? $entity->bundle() : NULL,
    '@id' => $entity->id() ? $entity->id() : NULL,
    '%label' => $entity->label() ? $entity->label() : NULL,
  ];
  \Drupal::logger('epa_core')
    ->notice(t('@typeid entity deleted. (Entity bundle: @bundle; Entity ID: @id; Entity label: %label)', $t_args));
}

/**
 * Implements hook_node_form_FORM_ID_alter().
 */
function epa_core_form_autosave_form_admin_settings_alter(&$form, FormStateInterface $form_state) {
  if (isset($form["allowed_content_entities"]["webform_submission"])) {
    unset($form["allowed_content_entities"]["webform_submission"]);
  }
}

/**
 * Implements hook_form_alter().
 */
function epa_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Disable HTML5 validation on all forms.
  $form['#attributes']['novalidate'] = 'novalidate';

  // Adds some extra descriptive text to media upload.
  if ($form_id === 'media_library_add_form_upload' && isset($form["media"][0]["fields"]["name"]["widget"][0]["value"]["#default_value"])) {
    $form["media"][0]["fields"]["name"]["widget"][0]["value"]["#default_value"] = '';
    $form["media"][0]["fields"]["name"]["widget"][0]["value"]["#description"] = t('Please give this item a descriptive title.');
  }

  if ($form_id === 'views_bulk_operations_configure_action') {
    $storage = $form_state->getStorage();
    // If we're reassigning the owner make the input element larger.
    if ($storage["views_bulk_operations"]["action_id"] === 'node_assign_owner_action' && isset($form["owner_uid"])) {
      $form["owner_uid"]["#size"] = "60";
    }
  }
  // Hide "Exclude - Cloned" option in the entity clone form
  if ($form_id === 'entity_clone_form') {
    if (isset($form['no_suffix'])) {
      $form['no_suffix']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function epa_core_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // If there is no comment due date, then notify the public with a message
  // that comments aren't being accepted.
  if ($entity->bundle() == 'public_notice' && $build['#view_mode'] == 'full') {
    if ($entity->field_comments_due_date->isEmpty()) {
      $build['no_comments_notice']['#markup'] = '<p class="no-comments">' . t('EPA is neither requesting nor accepting comments on this public notice. It is for informational purposes only.') . '</p>';
    }
    // Setup the name of the right column from the field label of the "How to
    // Comment" field so it's dynamic. If it's not set here, then if the "How
    // to Comment" field is empty, there is no header on the comment box since
    // the field is not rendered.
    if ($entity->hasField('field_how_to_comment')) {
      $build['how_to_comment_header']['#markup'] = $entity->field_how_to_comment->getFieldDefinition()->getLabel();
    }
  }
}

/**
 * Implements hook_field_widget_complete_form_alter().
 */
function epa_core_field_widget_complete_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  $plugin_id = $context['widget']->getPluginId();
  // If the field is a datetime or daterange field, then add a note to the
  // field's description indicating that times must be entered according to the
  // user's configured timezone. Since the "created" field suppresses the
  // container-level description, add it to the field directly in that case.
  if (strpos($plugin_id, 'datetime_') !== FALSE || strpos($plugin_id, 'daterange') !== FALSE) {
    $field_name = $context['items']->getName();
    if ($field_name == 'created') {
      _epa_core_augment_datetime_description($element['widget'][0]['value']['#description']);
    }
    else {
      if (empty($element['widget'][0]['#description'])) {
        $element['widget'][0]['#description'] = '';
      }

      // Adjust the description if the field is a datetime field vs. just a date field.
      /** @var \Drupal\datetime_range\Plugin\Field\FieldType\DateRangeFieldItemList $items */
      $items = $context['items'];
      if ($items->getFieldDefinition()->getSetting('datetime_type') === 'datetime' ) {
        _epa_core_augment_datetime_description($element['widget'][0]['#description']);
      }
    }
  }

  // Need to remove capability for content authors to add new "Link List"
  // components, but still allow them to edit any that already exist. We can't
  // simply remove them from config.
  // @link https://forumone.atlassian.net/browse/EPAD8-2552
  if ($plugin_id == 'paragraphs' && ($element["widget"]["#field_name"] == 'field_paragraphs' || $element["widget"]["#field_name"] == 'field_paragraphs_1' )) {
    if (isset($element["widget"]["add_more"]["operations"]["#links"]["add_more_button_link_list"])) {
      unset($element["widget"]["add_more"]["operations"]["#links"]["add_more_button_link_list"]);
    }
  }

  if ($plugin_id == 'smartdate_timezone' && isset($element['widget'][0]['timezone']['#options'])) {
    unset($element['widget'][0]['timezone']['#options']['']);
  }

  // If a link field only supports external links remove the confusing help text
  // the widget provides by default.
  if ($plugin_id == 'link_default' && isset($element["uri"]["#description"]))  {
    if ($element["uri"]["#link_type"] == LinkItemInterface::LINK_EXTERNAL) {
      $element["uri"]["#description"] = $element["#description"];
    }
    else {
      unset($element["uri"]["#description"]);
    }
  }
}

/**
 * Helper function to generate user's timezone description for datetime fields.
 */
function _epa_core_augment_datetime_description(&$field_description) {
  $date = new DrupalDateTime();
  $timezone = $date->format('T');
  $timezone_description = t('<strong>Note:</strong> Specify time in @timezone', ['@timezone' => $timezone])->render();
  if (!empty($field_description)) {
    if ($field_description instanceof FieldFilteredMarkup) {
      $field_description = $field_description->__toString();
    }
    elseif ($field_description instanceof TranslatableMarkup) {
      $field_description = $field_description->render();
    }
    $field_description .= '<br/>' . $timezone_description;
  }
  else {
    $field_description = $timezone_description;
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function epa_core_field_widget_paragraphs_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  if (!isset($element['#paragraph_type'])) {
    return;
  }

  // Show/hide the "Title Placement" field if 'Card Style' is set to the 'flag' option.
  if ($element['#paragraph_type'] == 'card_group') {
    /** @var \Drupal\field\Entity\FieldConfig $field_definition */
    $field_definition = $context['items']->getFieldDefinition();
    $paragraph_entity_reference_field_name = $field_definition->getName();
    $dependee_field_name = 'field_card_style';
    // Need to build specific selector to handle multiple card groups.
    $selector = sprintf(':input[name="%s[%d][subform][%s]"]', $paragraph_entity_reference_field_name, $element['#delta'], $dependee_field_name);

    $element['subform']['field_title_placement']['#states'] = [
      'visible' => [
        $selector => ['value' => 'default']
      ],
      'invisible' => [
        $selector => ['value' => 'flag']
      ],
    ];
  }

  // Show/hide the "Flag alignment" field if the parent card group's 'Card Style'
  // is set to the 'flag' option.
  if ($element['#paragraph_type'] == 'card') {
    /** @var \Drupal\field\Entity\FieldConfig $field_definition */
    $dependee_field_name = 'field_card_style';
    // Need to build specific selector to handle multiple card groups.
    $selector = sprintf(':input[name="%s[%d][subform][%s]"]', $element['#field_parents'][0], $element['#field_parents'][1], $dependee_field_name);
    $element['subform']['field_flag_card_alignment']['#states']  = [
      'visible' => [
        $selector => ['value' => 'flag'],
      ],
      'invisible' => [
        $selector => ['value' => 'default'],
      ],
    ];
  }
  if ($element['#paragraph_type'] == 'locations_of_prop_actions') {
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'name' => 'Other',
        'vid' => 'geographic_locations',
      ]);

    if (!empty($terms)) {
      // If multiple terms are found with the same name, this will take the first one.
      $term = reset($terms);
      $term_id = $term->id();

      /** @var \Drupal\field\Entity\FieldConfig $field_definition */
      $field_definition = $context['items']->getFieldDefinition();
      $paragraph_entity_reference_field_name = $field_definition->getName();
      $dependee_field_name = 'field_state_or_territory';
      // Need to build specific selector to handle multiple card groups.
      $selector = sprintf(':input[name="%s[%d][subform][%s]"]', $paragraph_entity_reference_field_name, $element['#delta'], $dependee_field_name);

      $element['subform']['field_location_proposed_other']['#states'] = [
        'visible' => [
          $selector => ['value' => $term_id]
        ],
        'invisible' => [
          $selector => [
            ['!value' => $term_id],
            'or',
            ['value' => 'empty']
          ]
        ],
      ];

      // To add the asterisk to the actual text field wwe need to target the textfield itself.
      // @link https://www.drupal.org/forum/support/module-development-and-code-questions/2016-11-23/field-states-api-required-hidden-fields#comment-12881635
      $element["subform"]["field_location_proposed_other"]["widget"][0]["value"]['#states'] = [
        'required' => [
          $selector => ['value' => $term_id]
        ],
      ];
    }
  }
}

/**
 * Custom validation for Public Notices to check proposed location.
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return void
 */
function epa_core_location_proposed_other_form_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $paragraphs = $form_state->getValue(['field_locations_of_prop_actions']);
  if (!empty($paragraphs)) {
    foreach ($paragraphs as $paragraph) {
      if (isset($paragraph['subform']['field_state_or_territory'])) {
        if ($trigger_field_value = $paragraph['subform']['field_state_or_territory'][0]['target_id']) {
          if ($term = Term::load($trigger_field_value)) {
            $term_name = $term->getName();
            $locations_of_prop_actions = $paragraph['subform']['field_location_proposed_other'][0]['value'];
            // Check if Other is selected.
            if ($term_name == 'Other' && empty($locations_of_prop_actions)) {
              $form_state->setErrorByName('field_location_proposed_other', t('Please enter other location of proposed actions'));
            }
          }
        }
      }
    }
  }
}
/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function epa_core_entity_bundle_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {
  $env_lang = getenv('WEBCMS_LANG');
  if (isset($env_lang) && $env_lang === 'es' && $entity_type->id() == 'node' && !empty($fields['field_language'])) {
    $fields['field_language']->setDefaultValue('es');
  }
}

/**
 * Provides default values for our type fields across a couple content types.
 */
function epa_core_default_value_field_type(ContentEntityInterface $entity, FieldDefinitionInterface $definition) {
  if ($entity->getEntityTypeId() === 'node') {
    switch ($entity->bundle()) {
      case 'public_notice':
        $term_name = "announcements and schedules";
        break;
      case 'news_release':
        $term_name = "news release";
        break;
      case 'perspective':
        $term_name = "speeches, testimony and transcripts";
        break;
      case 'regulation':
        $term_name = "other policies and guidance";
        break;
    }
    if (!empty($term_name)) {
      $term = Drupal::entityTypeManager()->getStorage('taxonomy_term')
        ->loadByProperties(['name' => $term_name, 'vid' => 'type']);
      if (!empty($term)) {
        $term = reset($term);
        return $term->id();
      }
    }
  }
}

/**
 * Provides default values for our channel fields across a couple content types.
 */
function epa_core_default_value_field_channel(ContentEntityInterface $entity, FieldDefinitionInterface $definition) {
  if ($entity->getEntityTypeId() === 'node') {
    switch ($entity->bundle()) {
      case 'regulation':
        $term_name = "laws & regulations";
        break;
    }
    if (!empty($term_name)) {
      $term = Drupal::entityTypeManager()->getStorage('taxonomy_term')
        ->loadByProperties(['name' => $term_name, 'vid' => 'channels']);
      if (!empty($term)) {
        $term = reset($term);
        return $term->id();
      }
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function epa_core_entity_operation_alter(array &$operations, EntityInterface $entity) {
  // Do not redirect node edit operations to the list page.
  // This code is needed because the Views setting for this is ignored.
  // https://www.drupal.org/project/node/issues/2689297
  if ($entity->getEntityTypeId() == 'node' && isset($operations['edit']['url'])) {
    $operations['edit']['url'] = Url::fromRoute('entity.node.edit_form', ['node' => $entity->id()]);
  }
}

/**
 * Implements theme_preprocess_form_element().
 */
function epa_core_preprocess_form_element(array &$variables) {
  $field_types = [
    'checkbox',
  ];
  if (\Drupal::service('router.admin_context')->isAdminRoute() && !in_array($variables['element']['#type'], $field_types)) {
    $variables['description_display'] = 'before';
  }
}

use Drupal\Core\Template\Attribute;

/**
 * Prepares variables for views-style-epa-core-uswds-collection.html.twig template.
 */
function template_preprocess_views_style_epa_core_uswds_collection(&$variables) {

  $view = $variables['view'];

  $variables['attributes']['class'] = ['usa-collection'];

  foreach ($variables['rows'] as $id => $row) {
    $variables['rows'][$id] = [];
    $variables['rows'][$id]['content'] = $row;
    $variables['rows'][$id]['attributes'] = new Attribute();
    $variables['rows'][$id]['attributes']->addClass('usa-collection__item');
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function epa_core_module_implements_alter(&$implementations, $hook) {
  // Prevent group_content_menu module's form alter from happening.
  // This prevents the menu settings from being displayed
  if ($hook === 'form_alter' && isset($implementations['group_content_menu'])) {
    unset($implementations['group_content_menu']);
  }

  // Prevent siteimprove module from rendering into the admin bar.
  if ($hook === 'toolbar' && isset($implementations['siteimprove'])) {
    unset($implementations['siteimprove']);
  }
}

/**
 * Implements hook_entity_type_build().
 */
function epa_core_entity_type_build(array &$entity_types) {
  if (isset($entity_types['paragraphs_library_item'])) {
    $entity_types['paragraphs_library_item']->setHandlerClass('access', 'Drupal\epa_core\EpaCoreLibraryItemAccessControlHandler');
  }
}

/**
 * Implements hook_entity_presave().
 */
function epa_core_node_presave(EntityInterface $node) {
  if ($node->hasField('field_search_text')){
    // Render using front-end theme
    $theme_manager = \Drupal::service('theme.manager');
    $active_theme = $theme_manager->getActiveTheme();
    $default_theme_name = \Drupal::config('system.theme')->get('default');
    $default_theme = \Drupal::service('theme.initialization')->getActiveThemeByName($default_theme_name);
    $theme_manager->setActiveTheme($default_theme);

    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
    $full_output = $view_builder->view($node,'search_index');
    $node->field_search_text->setValue(strip_tags(\Drupal::service('renderer')
      ->renderPlain($full_output)));

    // Revert to the active theme
    $theme_manager->setActiveTheme($active_theme);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for views_exposed_form().
 *
 * Custom integration for facets. When a Views exposed filter is modified on a
 * search results page it will lose any facets which have been already selected.
 * This adds hidden fields for each facet so their values are retained.
 */
function epa_core_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
 if (!empty($form["field_search_text_value"])) {
     $form["field_search_text_value"]['#field_suffix'] = t('Note: searches most fields');
 }

  $views_exposed_forms = [
    'views-exposed-form-moderated-content-moderated-content',
    'views-exposed-form-moderated-content-page-1',
    'views-exposed-form-group-moderated-content-block-1',
    'views-exposed-form-group-nodes-block-1',
  ];

  if (in_array($form['#id'], $views_exposed_forms) && isset($form['revision_uid'])) {
    if ($form['revision_uid']['#description']) {
      unset($form['revision_uid']['#description']);
    }
  }

  // Retrieve the view object and the query plugin.
  $storage = $form_state->getStorage();
  if (!isset($storage['view'])) {
    return;
  }
  $view = $storage['view'];
  if (!($view instanceof ViewExecutable)) {
    return;
  }
  $query_plugin = $view->getQuery();
  // Make sure the view is based on Search API and has the "Preserve facets"
  // option enabled, and that the Facets module is installed.
  $preserve_facets = !empty($query_plugin->options['preserve_facet_query_args'])
    && $query_plugin instanceof SearchApiQuery
    && \Drupal::moduleHandler()->moduleExists('facets');
  if ($preserve_facets) {
    // Retrieve the facet source.
    $query = $query_plugin->getSearchApiQuery();
    $display_id = $query->getSearchId(FALSE);
    $facet_source_id = str_replace(':', '__', 'search_api:' . $display_id);
    $facet_source = \Drupal::entityTypeManager()
      ->getStorage('facets_facet_source')
      ->load($facet_source_id);
    if (!$facet_source) {
      return;
    }
    if ('facets_pretty_paths' == $facet_source->getUrlProcessorName()) {
      $form['#action'] = NULL;
    }
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function epa_core_entity_base_field_info_alter(&$fields, $entity_type) {
  // If entity is user show user status and last access.
  if ($entity_type->id() == 'user') {
    if (isset($fields['status'])) {
      $fields['status']->setDisplayConfigurable('view', TRUE)
        ->setTargetEntityTypeId('user');
    }
    if (isset($fields['access'])) {
      $fields['access']->setDisplayConfigurable('view', TRUE)
        ->setTargetEntityTypeId('user');
    }
  }
}

/**
 * Implements hook_entity_field_access().
 */
function epa_core_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Field\FieldItemListInterface $items = NULL)
{
  if ($field_definition->getTargetEntityTypeId() == 'user') {
    switch ($field_definition->getName()) {
      case 'status':
        if ($operation == 'view') {
          return AccessResult::allowedIfHasPermission($account, 'view group user status field');
        }
        break;
      case 'access':
        if ($operation == 'view') {
          return AccessResult::allowedIfHasPermission($account, 'view group user last access field');
        }
        break;
    }
  }
  return AccessResult::neutral();
}


