<?php

/**
 * @file
 * Contains epa_workflow.module.
 */

use Drupal\block\Entity\Block;
use Drupal\content_moderation\Entity\ContentModerationStateInterface;
use Drupal\content_moderation\Form\EntityModerationForm;
use Drupal\content_moderation_notifications\ContentModerationNotificationInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\RevisionLogInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\epa_workflow\Form\EPAContentModerationEntityModerationForm;

/**
 * Implements hook_entity_base_field_info().
 */
function epa_workflow_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  $config_syncing = \Drupal::isConfigSyncing();
  if ($entity_type->id() == 'node' && !$config_syncing) {
    $fields['epa_revision_automated'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Moderation automated'))
      ->setDescription(t('When true current moderation state is automated.'))
      ->setRevisionable(TRUE)
      ->setDefaultValue(NULL);
  }
  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function epa_workflow_content_moderation_state_insert(ContentModerationStateInterface $entity) {
  // Disable hook during migration.
  if (drupal_static('epa_node_migration', FALSE)) {
    return;
  }

  $epa_moderation = \Drupal::service('epa_workflow.moderation_manager');
  if ($epa_moderation->isModeratedEntity($entity)) {
    $epa_moderation->processModeration($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * @see Drupal\group\Entity\GroupContent::postSave
 * @see https://www.drupal.org/project/group/issues/2872697
 * @see https://www.drupal.org/project/drupal/issues/2803717
 */
function epa_workflow_content_moderation_state_update(ContentModerationStateInterface $entity) {
  // Disable hook during migration.
  if (drupal_static('epa_node_migration', FALSE)) {
    return;
  }

  $epa_moderation = \Drupal::service('epa_workflow.moderation_manager');
  // Group will trigger an update after insert.
  // Check to see if entity is moderated.
  // Check to see if content revision id has changed.
  // Also, check that the moderation state isn't looping over itself.
  if ($epa_moderation->isModeratedEntity($entity)
      && $entity->content_entity_revision_id->value != $entity->original->content_entity_revision_id->value
      && $entity->getRevisionId() != $entity->getLoadedRevisionId()
  ) {
    $epa_moderation->processModeration($entity);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @todo This should probably be contributed back.
 */
function epa_workflow_form_content_moderation_notification_form_alter(array &$form, FormStateInterface $form_state) {
  $workflow_id = $form['workflow']['#default_value'];
  $workflow = \Drupal::entityTypeManager()->getStorage('workflow')->load($workflow_id);
  $entity_types = $workflow->getTypePlugin()->getEntityTypes();
  $entity_types[] = 'content_moderation_notifications';
  $form['body']['token_tree_link']['#token_types'] = array_unique(array_merge($form['body']['token_tree_link']['#token_types'], $entity_types));

  $notification = $form_state->getFormObject()->getEntity();
  $workflow_process = $notification->getThirdPartySetting('epa_workflow', 'workflow_process', 'any');
  $workflow_options = [
    'any' => t('Any'),
    'automatic' => t('Automatic workflow'),
    'sunset' => t('Unpublishing due to sunset date'),
    'manual' => t('Manual'),
  ];

  $form['workflow_process'] = [
    '#type' => 'radios',
    '#title' => t('Workflow Process'),
    '#options' => $workflow_options,
    '#description' => t('Notification will react to the selected trigger.'),
    '#default_value' => $workflow_process,
  ];

  $form['#entity_builders']['epa_workflow'] = '_epa_workflow_moderation_form_entity_builder';
}

/**
 * Entity builder for content_moderation_notification_form.
 */
function _epa_workflow_moderation_form_entity_builder($entity_type_id, ContentModerationNotificationInterface $notification, &$form, FormStateInterface &$form_state) {
  $workflow_process = $form_state->getValue('workflow_process', 'any');
  $notification->setThirdPartySetting('epa_workflow', 'workflow_process', $workflow_process);
}

/**
 * Implements hook_mail_alter().
 *
 * Sets header content type to html.
 * Can also achieve by installing mailsystem and add a module specific
 * configuration for content_moderation_notifications.
 *
 * @see https://www.drupal.org/project/content_moderation_notifications/issues/2903550
 */
function epa_workflow_mail_alter(&$message) {
  if ($message['id'] == 'content_moderation_notifications_content_moderation_notification') {
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';

    // Avoid sending the notification messages to the site email address; prefer donotreply.
    if ($message['to'] == 'drupal_admin@epa.gov') {
      $message['to'] = 'donotreply@epa.gov';
    }

    // Log here to avoid having to create our own mail service.
    $logger = \Drupal::logger('epa_workflow');
    $transition = \Drupal::service('content_moderation_notifications.notification_information')->getTransition($message['params']['context']['node']);
    $logger->info('Notification email with subject: %subject was sent to: %to  when the %transition transition was executed on revision %vid', ['%to' => $message['params']['headers']['Bcc'], '%subject' => $message['subject'], '%vid' => $message['params']['context']['node']->getRevisionId(), '%transition' => $transition->label()]);
  }
}

/**
 * Implements hook_content_moderation_notification_mail_data_alter().
 */
function epa_workflow_content_moderation_notification_mail_data_alter(EntityInterface $entity, array &$data) {
  $eic_notifications = [
    'epa_content_has_been_approved',
    'epa_content_needs_review',
    'epa_content_needs_review_manual',
    'epa_content_about_to_expire',
    'epa_content_has_expired',
    'epa_content_will_expire',
  ];
  if (in_array($data['notification']->id, $eic_notifications)) {
    $groups = \Drupal::service('epa_web_areas.web_areas_helper')->getNodeReferencingGroups($entity);
    foreach ($groups as $group) {
      $eic_email = $group->field_editor_in_chief->entity->mail->value;
      if (!in_array($eic_email, $data['to'])) {
        $data['to'][] = $eic_email;
      }

      // Add editors for all notifications except Published needs review.
      if ($data['notification']->id != 'epa_content_needs_review') {
        $members = $group->getMembers('editor');
        foreach ($members as $member) {
          $editor_email = $member->getUser()->getEmail();
          if (!in_array($editor_email, $data['to'])) {
            $data['to'][] = $editor_email;
          }
        }
      }
    }
  }

  // The notifications make all users BCC by default so there's no good way to
  // validate that the correct users are being sent the notification. This
  // settings variable being set will allow us to see the list of users in the
  // message body now.
  if (Settings::get('epa_content_moderation_email_debug', NULL)) {
    $user_list = implode(', ', $data['to']);
    $data['params']['message'] .= $user_list;
  }

}

/**
 * Implements hook_field_formatter_info_alter().
 */
function epa_workflow_field_formatter_info_alter(array &$info) {
  if (!empty($info['scheduled_publish_generic_formatter'])) {
    $info['scheduled_publish_generic_formatter']['class'] = 'Drupal\epa_workflow\Plugin\Field\FieldFormatter\EPAScheduledPublishGenericFormatter';
  }
}

/**
 * Implements hook_ENTITY_TYPE_revision_create().
 */
function epa_workflow_node_revision_create(EntityInterface $new_revision, EntityInterface $entity, $keep_untranslatable_fields) {
  // Disable hook during migration.
  if (drupal_static('epa_node_migration', FALSE)) {
    return;
  }

  // Remove any schedule field settings from the previous revision.
  if ($new_revision->hasField('field_scheduled_transition')) {
    $new_revision->set('field_scheduled_transition', NULL);
  }
}

/**
 * Implements hook_field_widget_complete_form_alter().
 */
function epa_workflow_field_widget_complete_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  $plugin_id = $context['widget']->getPluginId();

  if ('moderation_state_default' === $plugin_id && isset($element['widget'][0]["state"]["#options"]) && key_exists('draft', $element['widget'][0]["state"]["#options"])) {
    if (!in_array($element['widget'][0]["state"]["#default_value"], ['draft_needs_review'])) {
      $element['widget'][0]["state"]["#default_value"] = 'draft';
    }
    $element['widget'][0]["#access"] = FALSE;
  }
}

/**
 * Implements hook_form_alter().
 */
function epa_workflow_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'content_moderation_entity_moderation_form') {
    \Drupal::service('class_resolver')
      ->getInstanceFromDefinition(EPAContentModerationEntityModerationForm::class)
      ->formAlter($form, $form_state);
  }

  if ((in_array($form_id, ['content_moderation_entity_moderation_form']) && isset($form['submit'])) || isset($form['node_bulk_form'])) {
    _epa_workflow_add_compliance_checkboxes($form);
  }

  if ($form_id == 'revision_overview_form') {
    $form['#attached']['library'][] = 'epa_workflow/revision_list';
    foreach ($form['node_revisions_table'] as $key => $row) {
      // Add some text to the row if the revision is the published rev.
      if (is_numeric($key) && in_array('is-published', $row['#attributes']['class'])) {
        $form['node_revisions_table'][$key]['operations']['current-revision']['#markup'] = "<strong>Currently published revision</strong>";
      }
    }
  }
  if (in_array($form_id, ['user_form','user_register_form'])) {
    // Only show the checkbox that allows setting a user as a debugging user
    // when on a non-prod environment.
    $form["field_workflow_debugger"]["#access"] = getenv('WEBCMS_SITE') !== 'prod';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for entity_clone_form.
 *
 * Alters the description text to include additional info on the clone form.
 */
function epa_workflow_form_entity_clone_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $markup */
  $default_args = $form['description']['#markup']->getArguments();
  $form['description']['#markup'] = t('<p>Do you want to clone the <em>@type</em> entity named <em>@title</em>?</p><p>Note: Cloning this page does not impact the current page.</p><ul><li>If there is a \'live page\' you will be cloning the live page content.<ul><li>It will not clone both the live and draft content</li></ul><li>If there is not a \'live page\' you will be cloning the latest draft content.</li></ul><p>Your newly created cloned entity will automatically be set to draft.</p>', $default_args);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_confirm_form.
 *
 * Adjusts the description text shown on the 'delete node' page.
 */
function epa_workflow_form_node_confirm_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  if (!$node) {
    return;
  }

  $form['description']['#markup'] = t('<p>This action cannot be undone. Clicking the "Delete" button below will delete every revision of this page, including the published revision.</p><p>You can save a copy of the published page, by <a href=":href">exporting it here</a> first.</p>', [':href' => Url::fromRoute('epa_node_export.admin_page', ['node' => $node->id() ])->toString()]);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function epa_workflow_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  if ($node instanceof NodeInterface && !$node->isNew()) {

    // Loading will always return the "Current revision".
    /** @var \Drupal\node\NodeInterface $current */
    $current = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->load($node->id());

    /*
     * The revision ID of the "Current revision" (published) will be different
     * than the most recent revision (latest version).
     */
    if ($node->getRevisionId() !== $current->getRevisionId()) {
      $url = $node->toUrl('version-history')->toString();
      $markup = t("<strong>Note:</strong> The revision you are editing is not the currently published content. It may include edits that are not visible on the published page. Refer to the <a target='_blank' href='@url'>revision page</a> to see other revisions and revert if necessary.", ['@url' => $url]);
      \Drupal::messenger()->addWarning($markup);
    }

    // Adding "Last updated by" above the "Author" in the meta details group
    $form['meta']['last_updated_by'] = [
      '#type' => 'item',
      '#markup' => $node->getRevisionUser()->getAccountName(),
      '#title' => t("Last updated by"),
      '#attributes' => [
        'class' => ['entity-meta__last-updated-by']
      ],
      '#weight' => 10,
    ];

    $form['meta']['author']['#title'] = t('Original Author');
    $form['meta']['author']['#weight'] = 20;

    // Updating the "Last saved" to reflect the revision's last saved date rather than the node's last "changed" date.
    $form['meta']['changed']['#markup'] = \Drupal::service('date.formatter')->format($node->getRevisionCreationTime(), 'formal_datetime');
    $form['meta']['changed']['#title'] = t('Last updated on');

  }
}

/**
 * Custom submit handler for the content moderation form when placed on node
 * view pages.
 */
function _epa_workflow_node_view_moderation_form_submit(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $form_state->get('entity');
  /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
  $storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());

  $entity = $storage->createRevision($entity, $entity->isDefaultRevision());

  $new_state = $form_state->getValue('new_state');

  /** @var DrupalDateTime $publish_date */
  if ($publish_date = $form_state->getValue('field_publish_date')) {
    $entity->set('field_publish_date', $publish_date->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT, ['timezone' => 'UTC']));
  }

  $entity->set('moderation_state', $new_state);

  if ($entity instanceof RevisionLogInterface) {
    $entity->setRevisionCreationTime(\Drupal::time()->getRequestTime());
    $entity->setRevisionLogMessage($form_state->getValue('revision_log'));
    $entity->setRevisionUserId(\Drupal::currentUser()->id());
  }
  $entity->save();

  \Drupal::messenger()->addStatus(t('The moderation state has been updated.'));

  if (isset($new_state) && $new_state === 'draft') {
    $form_state->setRedirectUrl($entity->toUrl('edit-form'));
  }
  else {
    $form_state->setRedirectUrl($entity->toUrl('canonical'));
  }
}

/**
 * Implements hook_entity_view().
 */
function epa_workflow_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Add the moderation form to the full view mode of a node for authenticated
  // users.
  if ($view_mode === 'full' && $entity->getEntityTypeId() == 'node' && \Drupal::currentUser()->isAuthenticated()) {
    if (isset($entity->in_preview) && $entity->in_preview) {
      return;
    }
    // Only display the interface on the latest and default revisions.
    if (!$entity->isLatestRevision() && !$entity->isDefaultRevision()) {
      return;
    }

    // Logic to ensure that only non-beta tester role users get to see the 'old' content moderation info box.
    if (!in_array('beta_tester', \Drupal::currentUser()->getRoles())) {
      build_content_moderation_info_box($entity, $build);
    }
  }
}

/**
 * Helper function to build 'info box' for displaying content moderation info.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity (Node) to build the info box for.
 * @param array $build
 *   The current build render array.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function build_content_moderation_info_box(EntityInterface $entity, array &$build): void {
  /** @var \Drupal\Core\Render\Renderer $renderer */
  $renderer = \Drupal::service('renderer');
  /** @var \Drupal\node\Entity\Node  $entity */

  $node_edit_link = NULL;
  if ($entity->isLatestRevision() && $entity->access('update')) {
    $link_options = [
      'attributes' => [
        'class' => [
          'button',
        ],
      ],
    ];

    $edit_link = Link::fromTextAndUrl(
      t('Edit'),
      Url::fromRoute(
        'entity.node.edit_form',
        ['node' => $entity->id()],
        $link_options
      )
    );

    $node_edit_link = $edit_link->toRenderable();
  }

  $nid = [
    '#type' => 'item',
    '#title' => t("Node ID"),
    '#markup' => $entity->id(),
  ];

  $latest_vid = \Drupal::entityTypeManager()
    ->getStorage($entity->getEntityTypeId())
    ->getLatestRevisionId($entity->id());

  $latest_revision_link = Link::fromTextAndUrl(
    $latest_vid,
    Url::fromRoute(
      'entity.node.revision',
      ['node' => $entity->id(), 'node_revision' => $latest_vid],
      [
        'attributes' => [
          'title' => t('Latest revision ID'),
          'class' => ['revision-link']
        ],
      ]
    ),
  )->toRenderable();

  $vid = [
    '#type' => 'item',
    '#title' => t('Revision ID'),
    '#markup' => $latest_revision_link,
  ];

  // Build display for the author who made the revision.
  $revision_author = NULL;
  if ($entity->getRevisionUser()) {
    $revision_author = $entity->getRevisionUser()->get('name')->value;
    $author_uid = $entity->getRevisionUserId();
    $revision_author_link = Link::createFromRoute(
      $revision_author,
      'entity.user.canonical',
      ['user' => $author_uid]
    )->toRenderable();

    $revision_author = [
      '#type' => 'item',
      '#title' => t("Revision saved by"),
      '#markup' => $revision_author_link,
    ];
  }

  // Want to display the `field_review_deadline` date
  // on the moderation block only on published content
  // and the `field_review_deadline` has a value.
  $review_deadline = NULL;
  if (isset($entity->field_review_deadline) && !$entity->field_review_deadline->isEmpty() && $entity->isPublished()) {

    $review_deadline_render = $entity->field_review_deadline->view([
      'label' => 'hidden',
      'type' => 'datetime_default',
      'settings' => [
        'format_type' => 'medium_no_time',
      ],
    ]);

    $review_deadline_rendered = $renderer->render($review_deadline_render);

    $review_deadline = [
      '#type' => 'item',
      '#title' => t("Review deadline"),
      '#markup' => $review_deadline_rendered,
    ];

  }

  // The current moderation state.
  $current = NULL;
  if (!$entity->get('moderation_state')->isEmpty()) {
    $current_state = $entity->get('moderation_state')->value;
    /** @var \Drupal\workflows\WorkflowInterface $workflow */
    $workflow = \Drupal::service('content_moderation.moderation_information')
      ->getWorkflowForEntity($entity);

    $current = [
      '#type' => 'item',
      '#title' => t('Moderation state'),
      '#markup' => $workflow->getTypePlugin()
        ->getState($current_state)
        ->label(),
    ];
  }

  // Flag link item for notification opt-in.
  /** @var \Drupal\flag\Entity\Flag $flag */
  $flag = \Drupal::entityTypeManager()
    ->getStorage('flag')
    ->load('notification_opt_in');

  // Normally we'd want to use the link_builder service provided by flag, but
  // we really only want the link and not the extra div that comes with the
  // flag template out of the box.
  $flag_link_plugin = $flag->getLinkTypePlugin();
  $flag_link = $flag_link_plugin->getAsFlagLink($flag, $entity);

  $flag_link_item = [
    '#markup' => $renderer->render($flag_link),
  ];

  $build['epa_content_moderation_info_box'] = [
    '#theme' => 'epa_content_info_box',
    '#node_edit_link' => $node_edit_link,
    '#nid' => $nid,
    '#vid' => $vid,
    '#revision_author' => $revision_author,
    '#review_deadline' => $review_deadline,
    '#current' => $current,
    '#flag_link' => $flag_link_item,
    '#content_moderation_form' => \Drupal::formBuilder()
      ->getForm(EntityModerationForm::class, $entity),
  ];
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Overriding titles and weights for tabs. This is to get the tabs in the correct
 * order and with correct titles for using them within the custom node tabs.
 *
 * @see \Drupal\epa_workflow\Plugin\Block\EpaNodeTabsBlock
 */
function epa_workflow_menu_local_tasks_alter(array &$data, $route_name) {

  // Hide the node edit tab always. This is added back as a separate button in the epa_content_info_box
  if (isset($data['tabs'][0]['entity.node.edit_form'])) {
    unset($data['tabs'][0]['entity.node.edit_form']);
  }

  // This should only be altered if the user has the permission to the new node tabs.
  if (!\Drupal::currentUser()->hasPermission('use_epa_node_tabs')) {
    return;
  }

  // Order:
  // - Back to group dashboard
  // - Edit page layout
  // - Preview view modes
  // - clone
  // - export
  // - delete

  $override_link_titles = [
    [
      'epa_web_areas.group_content' => [
        'title' => 'Content',
      ],
      'group.view' => [
        'title' => 'Content',
      ],
      'epa_web_areas.node_group_dashboard' => [
        'title' => 'Back to group dashboard',
        'weight' => -100
      ],
      'layout_builder_ui:layout_builder.overrides.node.view' => [
        'title' => 'Edit page layout',
        'weight' => -90
      ],
      'view_modes_display.entities:node.view_mode_display_tab' => [
        'title' => 'Preview view modes',
        'weight' => -80
      ],
      'entity_clone.clone:node.clone_tab' => [
        'weight' => -70
      ],
      'epa_node_export.admin_page' => [
        'weight' => -60
      ],
      'entity.node.delete_form' => [
        'weight' => 100
      ],
    ],
    [
      'content_moderation.content' => [
        'title' => 'Latest Revisions',
      ],
      // Hides the task provided by the content moderation module.
      'content_moderation.moderated_content' => [
        'title' => FALSE,
      ],
    ],
  ];

  // Level 0 links are tabs and level 1 are subtabs.
  foreach ($override_link_titles as $level => $link_overrides) {
    if (isset($data['tabs'][$level])) {
      foreach ($link_overrides as $link_name => $link_data) {
        if (isset($data['tabs'][$level][$link_name])) {
          // Check if we have a title we want to override.
          if (isset($link_data['title'])) {
            if ($link_data['title'] === FALSE) {
              unset($data['tabs'][$level][$link_name]);
            }
            else {
              $data['tabs'][$level][$link_name]['#link']['title'] = $link_data['title'];
            }
          }

          // Check if we have a weight we want to override.
          if (isset($link_data['weight'])) {
            $data['tabs'][$level][$link_name]['#weight'] = $link_data['weight'];
          }
        }
      }
    }
  }

}

/**
 * Implements hook_entity_presave().
 */
function epa_workflow_node_presave(NodeInterface $node) {
  if (drupal_static('epa_node_migration', FALSE)) {
    return;
  }

  $storage = \Drupal::entityTypeManager()->getStorage('node');
  /** @var \Drupal\node\Entity\Node $original */
  $original = $node->original;
  if ($original) {
    $default_revision_id = $original->get('vid')->value;
    $latest_revision_id = $storage->getLatestRevisionId($node->id());
    $loaded_rev_id = $node->getLoadedRevisionId();
    $moderation_state = $node->moderation_state->value;
    $moderation_info = \Drupal::service('content_moderation.moderation_information');
    $workflow = $moderation_info->getWorkflowForEntity($node);
    $workflow_states = $workflow->get('type_settings')['states'];

    // Only leapfrog to reset latest revision if the following is true:
    // - Revision undergoing transition is the default revision AND
    // - there's a different latest revision AND
    // - we are transitioning the current revision to another state that will make
    // it the "default" revision AND
    // - this is not a "syncing" save (a save that is meant to happen more-or-less
    // transparently on a revision just to update field data)
    if (!$node->isSyncing() && isset($workflow_states[$moderation_state]) && $workflow_states[$moderation_state]['default_revision'] && $loaded_rev_id == $default_revision_id && $loaded_rev_id != $latest_revision_id) {
      $node->leapfrog = $latest_revision_id;
    }

    // Set the "last_revision" property to fool the content_moderation_notifications
    // module into properly detecting which transition we are firing since it
    // does not expect us to be transitioning a non-latest revision.
    // So if we're doing a save on the default revision and there's a different
    // latest revision, we need to set the "last_revision" as the current revision.
    if (!$node->isSyncing() && $loaded_rev_id == $default_revision_id && $loaded_rev_id != $latest_revision_id) {
      $node->last_revision = $original;
    }
  }

  // Update the log message for revisions created through bulk operations.
  $request = \Drupal::request();
  $parameters = $request->request->all();
  if (isset($parameters['node_bulk_form'])) {
    $new_state = $node->moderation_state->value;
    $node->setRevisionLogMessage(t('Transitioned to %state as part of a bulk operation.', [
      '%state' => $new_state,
    ]));
  }

  // Update field_author_names with values from field_authors.
  if (in_array($node->bundle(), ['perspective', 'speeches'])) {
    if (!$node->field_authors->isEmpty()) {
      $author_paragraphs = $node->field_authors->getValue();
      $tids = [];
      foreach ($author_paragraphs as $author) {
        $target_id = $author['target_id'];
        $paragraph = Paragraph::load($target_id);
        $author_tid = $paragraph->field_author->target_id;
        array_push($tids, $author_tid);
      }
      $node->field_author_names = [];
      foreach ($tids as $tid) {
        $node->field_author_names[] = [
          'target_id' => $tid,
        ];
      }
    }
    else {
      // Clear new field value if field_authors is empty.
      $node->field_author_names = [];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function epa_workflow_node_update(NodeInterface $node) {
  if (isset($node->leapfrog)) {
    // If the revision being saved was the default, but was not the latest, then
    // we have a forward revision and we need to leap frog it to the front so
    // the user doesn't get confused by their "latest revision" disappearing.
    $storage = \Drupal::entityTypeManager()->getStorage('node');
    $last_revision = $storage->loadRevision($node->leapfrog);
    $last_revision->setNewRevision();
    // If our default revision is not published then this leapfrogged revision
    // should also take over the default revision spot. This follows the model
    // of what core does. If the default revision IS published then our leapfrog
    // revision is only the latest revision and does not take over the default.
    $last_revision->isDefaultRevision(!$node->isPublished());
    $last_revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());
    $last_revision->setChangedTime(\Drupal::time()->getRequestTime());
    $last_revision->setRevisionLogMessage(t('Restoring the latest revision (based on revision %vid) after a transition occurred to the current revision.', ['%vid' => $node->leapfrog]));
    $last_revision->setSyncing(TRUE);
    $last_revision->save();
  }
}

/**
 * Helper function to add compliance checkboxes to some forms.
 *
 * @param $form
 */
function _epa_workflow_add_compliance_checkboxes(&$form) {

  $link_508 = Link::fromTextAndUrl(
    t('applicable Section 508 requirements'),
    Url::fromUri('https://work.epa.gov/accessibility/create-accessible-content')
  );
  $link_508 = $link_508->toString();

  $link_external = Link::fromTextAndUrl(
    t('EPA’s External Site Links Procedure'),
    Url::fromUri('https://www.epa.gov/web-policies-and-procedures/procedure-external-site-links')
  );
  $link_external = $link_external->toString();

  // Create a checkbox for 508 compliance agreement.
  $compliance_checkbox = [
    '#type' => 'checkbox',
    '#title' => t('I certify that this page complies with:'),
    '#description' => t('All @508 and @external. ' .
      'This page will be subject to random external site link reviews and Section 508 compliance reviews. ' .
      'Non-compliant pages will be unpublished until remediated.', [
        '@508' => $link_508,
        '@external' => $link_external,
      ]),
    '#required' => FALSE,
    '#weight' => -1,
  ];

  // Add validation handler for the checkbox.
  $compliance_checkbox['widget']['#element_validate'] = ['_epa_workflow_form_validation_508'];

  // Ensure a revision comment is not required by default.
  $form['revision_log']['#required'] = FALSE;
  $form['revision_log']['#element_validate'] = ['_epa_workflow_form_validation_revision_log'];

  // Add the is-required class to the revision log so it looks required.
  // $form['revision_log']['#label_attributes']['class'][] = 'is-required';.
  // Make the element visible when publish is selected on the latest revision.
  if ($form['#form_id'] == 'content_moderation_entity_moderation_form' && isset($form['new_state'])) {
    $compliance_checkbox['#states'] = [
      'visible' => [
        ':input[name="new_state"]' => ['value' => 'published'],
      ],
    ];
    $form['workflow_508_compliant'] = $compliance_checkbox;
    $form['revision_log']['#states'] = [
      'required' => [
        ':input[name="new_state"]' => ['value' => 'published'],
      ],
    ];
  }

  // Make the element visible on VBO edits.
  if (isset($form['node_bulk_form'])) {
    $compliance_checkbox['#states'] = [
      'visible' => [
        ':input[name="action"]' => ['value' => 'set_to_published'],
      ],
    ];
    $form['header']['node_bulk_form']['workflow_508_compliant'] = $compliance_checkbox;
    $form['revision_log']['#states'] = [
      'required' => [
        ':input[name="action"]' => ['value' => 'set_to_published'],
      ],
    ];

    // Update field weights on the bulk update form so the submit button is
    // always at the bottom.
    $form['header']['node_bulk_form']['action']['#weight'] = 0;
    $form['header']['node_bulk_form']['workflow_508_compliant']['#weight'] = 1;
    $form['header']['node_bulk_form']['actions']['#weight'] = 1000;
  }

}

/**
 * Validation for compliance 508 checkbox.  Must require
 * the checkboxes be ticked when moving content to published.
 */
function _epa_workflow_form_validation_508($element, FormStateInterface $form_state, $form) {
  // Block form on latest revision.
  if ($form['#form_id'] == 'content_moderation_entity_moderation_form') {
    $op = $form_state->getValue('new_state');
  }

  // VBO form on content dashboard.
  if (isset($form['node_bulk_form'])) {
    $op = $form_state->getValue('action');
  }

  if ($op == 'Publish' || $op == 'published' || $op == 'set_to_published') {
    if (empty($form_state->getValue('workflow_508_compliant'))) {
      $form_state->setError($element, t('508 compliance is required to Publish content.'));
    }
  }
}

/**
 * Validation for revision log.  Must require
 * a revision log when moving content to published.
 */
function _epa_workflow_form_validation_revision_log($element, FormStateInterface $form_state, $form) {
  // Block form on latest revision.
  if ($form['#form_id'] == 'content_moderation_entity_moderation_form') {
    $op = $form_state->getValue('new_state');
  }

  if (isset($op) && in_array($op, ['Publish', 'published', 'set_to_published'])) {
    if (empty($form_state->getValue('revision_log'))) {
      $form_state->setError($element, t('Revision log required when publishing content.'));
    }
  }
}

/**
 * Implements hook_cron().
 */
function epa_workflow_cron() {
  $env_state = getenv('WEBCMS_ENV_STATE');
  if ($env_state !== 'migration') {
    /**
     * @var ScheduledPublishCron $scheduledPublishUpdate
     */
    $scheduledPublishUpdate = \Drupal::service('scheduled_publish.update');
    $scheduledPublishUpdate->doUpdate();
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function epa_workflow_module_implements_alter(&$implementations, $hook) {
  // We need control over this hook implementation so that we can stop
  // automated transitions during migrations.
  if ($hook == 'cron' && isset($implementations['scheduled_publish'])) {
    unset($implementations['scheduled_publish']);
  }
}

/**
 * Implements hook_form_alter().
 */
function epa_workflow_form_revision_overview_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['node_revisions_table'][0]['operations']['#prefix'] = '<strong>Latest revision</strong><br>';

  $current_revision = $form_state->getBuildInfo()['args'][0];

  $latest_vid = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->getLatestRevisionId($current_revision->id());
  $latest_revision = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadRevision($latest_vid);

  if ($latest_revision instanceof NodeInterface && !$latest_revision->isNew()) {
    $timezone = date_default_timezone_get();
    $date_formatter = \Drupal::service('date.formatter');
    // If latest revision and has a Publish Date set.
    if (isset($latest_revision->field_publish_date->value)) {
      $latest_revision_moderation_state = $latest_revision->moderation_state->value;

      $latest_formatted_date_time = $date_formatter->format(
        $latest_revision->field_publish_date->date->getTimestamp(), 'custom', 'F d, Y \a\t h:i a T', $timezone
      );

      // Is in the “Draft, approved” state.
      if ($latest_revision_moderation_state == 'draft_approved') {
        $message = t('<br>The revision will publish on %date.',['%date' => $latest_formatted_date_time]);
        $form['node_revisions_table'][0]['revision']['#context']['message']['#markup'] .= $message;
      }
      // Is in any other draft state.
      elseif ($latest_revision_moderation_state == 'draft' || $latest_revision_moderation_state == 'draft_needs_review') {
        // If publish date is in the future give user some guidance.
        if ($latest_revision->field_publish_date->date->getTimestamp() > time()) {
          $message = t('<br>The revision is scheduled to publish on %date, but will only do so if this draft is approved. Currently, the draft is NOT approved.', ['%date' => $latest_formatted_date_time]);
        }
        // If publish date is in the past indicate the draft will publish immediately.
        else {
          $message = t('<br>Since the scheduled publish date has already passed, this draft will publish immediately if it is approved. Remove or change the publish date if you do not wish for that to occur.');
        }
        $form['node_revisions_table'][0]['revision']['#context']['message']['#markup'] .= $message;
      }
    }
    // If the current revision is published and has a Sunset Date set.
    if ($current_revision->status->value && isset($current_revision->field_expiration_date->value)) {
      $current_formatted_date_time = $date_formatter->format(
        $current_revision->field_expiration_date->date->getTimestamp(), 'custom', 'F d, Y \a\t h:i a T', $timezone
      );

      $message = '<br>This content will automatically sunset, and be unpublished, on ' . $current_formatted_date_time . '.';
      // Search for current revision.
      foreach ($form['node_revisions_table'] as $delta => $revision) {
        if (isset($revision['#attributes']) && in_array('revision-current', $revision['#attributes']['class'])) {
          $form['node_revisions_table'][$delta]['revision']['#context']['message']['#markup'] .= $message;
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function epa_workflow_form_node_revision_revert_confirm_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#value'] = 'Copy and Set as Latest Revision';
}

/**
 * Implements hook_theme().
 */
function epa_workflow_theme($existing, $type, $theme, $path) {
  // @todo: Evaluate and remove the content_info_box given we won't use this after
  return [
    'entity_moderation_form' => [
      'template' => 'entity-moderation-form',
      'base hook' => 'content_moderation',
    ],
    'epa_content_info_box' => [
      'variables' => [
        'node_edit_link' => NULL,
        'nid' => NULL,
        'vid' => NULL,
        'revision_author' => NULL,
        'review_deadline' => NULL,
        'current' => NULL,
        'flag_link' => NULL,
        'content_moderation_form' => NULL,
      ],
    ],
    'epa_node_tabs' => [
      'variables' => [
        'tabs' => [],
      ],
    ],
    'epa_node_tab_item' => [
      'variables' => [
        'title' => NULL,
        'url' => NULL,
        'icon' => NULL,
        'icon_secondary' => NULL,
        'is_active' => FALSE,
        'children' => [],
        'is_child' => FALSE,
      ],
    ],
    'epa_follow_widget' => [
      'variables' => [
        'flag_link' => NULL,
        'current_user_is_following' => FALSE,
        'flag_users' => [],
        ]
      ],
    'epa_node_details' => [
      'variables' => [
        'nid' => NULL,
        'revision_url' => NULL,
        'revision_link' => NULL,
        'editor_in_chief' => NULL,
        'review_deadline' => NULL,
      ]
    ],
    'epa_content_info_box_advanced' => [
      'variables' => [
        'box_color' => NULL,
        'content_moderation_form' => NULL,
        'compare_link' => NULL,
        'follow_widget' => NULL,
        'node_details_widget' => NULL,
        'publicly_available' => FALSE,
      ],
    ],
    'epa_content_moderation_form' => [
      'variables' => [
        'box_color' => NULL,
        'current_state' => NULL,
        'content_moderation_form' => NULL,
        'review_deadline' => NULL,
        'last_modified' => NULL,
        'scheduled_publish' => NULL,
        'help_text' => NULL,
      ],
    ],
    'flag__notification_opt_in' => [
      'template' => 'flag--notification-opt-in',
      'base hook' => 'flag',
    ],
  ];
}

/**
 * Implements hook_page_top()
 */
function epa_workflow_page_top(array &$page_top) {
  // Only add this block if we're on a node route.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // Load our custom block
    $machine_name = 'epa_node_tabs';
    /** @var Drupal\Core\Block\BlockBase $block */
    $block = \Drupal::service('plugin.manager.block')
      ->createInstance($machine_name, []);
    if (!empty($block)) {
      if ($block->access(\Drupal::currentUser())) {
        $block->setContextValue('node', $node);
        $page_top['epa_node_tabs'] = $block->build();
        $page_top['epa_node_tabs']['#weight'] = 1000;
      }
    }

    $separate = $node;

    $machine_name = 'epa_workflow_contentinfobox';
    /** @var Drupal\Core\Block\BlockBase $content_info_block */
    $content_info_block = \Drupal::service('plugin.manager.block')
      ->createInstance($machine_name, []);
    if (!empty($content_info_block)) {
      if ($content_info_block->access(\Drupal::currentUser())) {
        $content_info_block->setContextValue('node', $separate);
        $page_top['content_info_box'] = $content_info_block->build();
        $page_top['content_info_box']['#weight'] = 1001;
      }
    }
  }
}

/**
 * Implements hook_block_access().
 *
 * @todo: Remove this once the local task redesign work becomes the standard for all.
 */
function epa_workflow_block_access(Block $block, $operation, AccountInterface $account) {
  // The core local tasks are special now with the local task redesign work.
  // We want to only have the standard local tasks shown if:
  // 1. Not on a node page
  // 2. If we are on a node page AND the user does not have the "Beta Tester" role
  if ($block->id() == 'gesso_local_tasks') {
    // First check to see if we're on a node route.
    if (!\Drupal::routeMatch()->getParameter('node')) {
      return AccessResult::neutral();
    }

    // Must mean we're on a node route so check if the user is a beta tester
    if ($account->hasRole('beta_tester')) {
      return AccessResult::forbidden();
    }
  }
}
