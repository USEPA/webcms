<?php

/**
 * @file
 * Contains epa_web_areas.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContent;
use Drupal\group\Entity\GroupInterface;
use Drupal\layout_builder\Plugin\SectionStorage\OverridesSectionStorage;
use Drupal\media_library\MediaLibraryState;

/**
 * Implements hook_form_FORM_BASE_ID_alter().
 *
 * - Used to hide field_hublinks if content belongs to group using
 * sidebar navigation as its navigation style.
 */
function epa_web_areas_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->getFormObject() instanceof EntityForm) {
    // Get group node is associated with.
    $entity = $form_state->getformObject()->getEntity();
    if ($entity->id()) {
      $group_contents = GroupContent::loadByEntity($entity);
      foreach ($group_contents as $group_content) {
        $group = $group_content->getGroup();
      }
    }
    elseif (isset($form_state->getStorage()['group'])) {
      $group = $form_state->getStorage()['group'];
    }

    // Add group label to form.
    if (!empty($group)) {
      $form['group_info']['#markup'] = '<strong>Web Area: </strong> ' . $group->toLink(NULL, 'canonical', ['attributes' => ['target' => '_blank']])->toString();
    }

    // Hide group field from users who do not have the permission to reassign content.
    if (isset($form['entitygroupfield'])) {
      $user = \Drupal::currentUser();
      $form['entitygroupfield']['#access'] = $user->hasPermission('reassign group content');
    }
  }
}

/**
 *
 */
function epa_web_areas_form_group_web_area_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $account = \Drupal::currentUser();
  if (isset($form['field_allow_news_releases'])) {
    $form['field_allow_news_releases']['#access'] = $account->hasPermission('permit news releases');
  }

  if (isset($form['field_allow_perspectives'])) {
    $form['field_allow_perspectives']['#access'] = $account->hasPermission('permit perspectives');
  }

  if (isset($form['field_allow_speeches'])) {
    $form['field_allow_speeches']['#access'] = $account->hasPermission('permit speeches');
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function epa_web_areas_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['group'])) {
    $entity_types['group']->setClass('Drupal\epa_web_areas\Entity\EPAGroup');
    $form_class = 'Drupal\epa_web_areas\Entity\Form\EPAGroupForm';
    $entity_types['group']->setFormClass('add', $form_class);
    $entity_types['group']->setFormClass('edit', $form_class);
  }
}

function epa_web_areas_form_node_speeches_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['title']['widget'][0]['value']['#default_value'] = 'Remarks for';
}

/**
 * Implements hook_preprocess_menu().
 *
 * Copied from admin_toolbar_links_access_filter with a change to ensure admins
 * get links filtered, too.
 */
function epa_web_areas_preprocess_menu(&$variables) {
  if (empty($variables['items'])) {
    // Additional empty check to prevent exotic situations, where the preprocess
    // function is entered even without items.
    // @see https://www.drupal.org/node/2833885
    return;
  }
  // Ensure that menu_name exists.
  if (!isset($variables['menu_name'])) {
    // In rare cases (for unknown reasons) menu_name may not be set.
    // As fallback, we can fetch it from the first menu item.
    $first_link = reset($variables['items']);
    /** @var Drupal\Core\Menu\MenuLinkDefault $original_link */
    // Fetch the menu_name from the original link.
    $original_link = $first_link['original_link'];
    $variables['menu_name'] = $original_link->getMenuName();
  }
  if ($variables['menu_name'] == 'admin') {
    if (admin_toolbar_links_access_filter_user_has_admin_role($variables['user'])) {
      admin_toolbar_links_access_filter_filter_non_accessible_links($variables['items']);
    }
  }
}

/**
 * Implements hook_field_widget_complete_form_alter().
 *
 * @todo Create helper to get group.
 */
function epa_web_areas_field_widget_complete_form_alter($element, FormStateInterface $form_state, $context) {
  // Get the widget for media library.
  $plugin_type = $context['widget']->getPluginId();
  if (!empty($plugin_type)
      && $plugin_type == 'media_library_widget'
      && $form_state->getFormObject() instanceof EntityForm
  ) {
    // Get group entity is associated with.
    // If the entity is unavailable, the group should be provided
    // given the entity is added via the group
    // e.g. group/{group_id}/{entity}/add.
    $entity = $form_state->getformObject()->getEntity();
    if ($entity->id() && $entity instanceof ContentEntityInterface) {
      $group_contents = GroupContent::loadByEntity($entity);
      foreach ($group_contents as $group_content) {
        $group = $group_content->getGroup();
      }
    }
    elseif (isset($form_state->getStorage()['group'])) {
      $group = $form_state->getStorage()['group'];
    }

    // Grab the media library state from the widget.
    // When a modal is opened, the group id will be included
    // as a query parameter. Though, we can extract the group id
    // directly from the media library state later.
    $media_library_state = $element['widget']['open_button']['#media_library_state'];
    $opener_parameters = $media_library_state->getOpenerParameters();
    if (!empty($group)) {
      $opener_parameters['group'] = $group->id();
      $media_library_state->set('media_library_opener_parameters', $opener_parameters);
      $media_library_state->set('hash', $media_library_state->getHash());
      $element['widget']['open_button']['#media_library_state'] = $media_library_state;
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function epa_web_areas_form_media_library_add_form_alter(&$form, FormStateInterface $form_state) {
  // Add a custom submit handler that runs after media is added and saved.
  if (!empty($form['actions'])) {
    $form['#submit'][] = 'epa_web_areas_group_media_submit';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function epa_web_areas_form_embedded_paragraphs_paragraphs_entity_embed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add custom help text describing each paragraph item.
  // @link https://forumone.atlassian.net/browse/EPAD8-2509
  $items = [
    Markup::create(t('<a target="_blank" href="https://www.epa.gov/webcmstraining/and-after-images">Before/After Swipe</a>: compare two images side-by-side')),
    Markup::create(t('<a target="_blank" href="https://www.epa.gov/webcmstraining/adding-boxes-webcms-editor">Boxes</a> highlight specific web content. Each box style has specific content requirements')),
    Markup::create(t('<a target="_blank" href="https://www.epa.gov/webcmstraining/creating-dynamic-list">Dynamic Lists</a> are automated lists of WebCMS content based on filters')),
    Markup::create(t('From Library can be used to add "<a target="_blank" href="https://www.epa.gov/webcmstraining/reusable-paragraphs-repeatable-content">reusable paragraphs</a>," which can be embedded on multiple pages')),
    t('Add Header adds headings like h2, h3, etc.'),
    Markup::create(t('<a target="_blank" href="https://www.epa.gov/webcmstraining/creating-slideshows">Slideshows</a> are pictures that can be cycled through')),
  ];

  $help_text_list = [
    '#theme' => 'item_list',
    '#type' => 'ul',
    '#items' => $items,
    '#weight' => -100,
  ];
  $form['help_text'] = $help_text_list;
  // Add a custom submit handler that runs after media is added and saved.
  if (!empty($form['actions'])) {
    $form['#submit'][] = 'epa_web_areas_group_media_submit';
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function epa_web_areas_editor_js_settings_alter(&$settings) {
  // Get entity object from route if provided.
  // If entity is not provided, group should be provided
  // given the entity is added via the group
  // e.g. group/{group_id}/{entity}/add.
  $parameters = \Drupal::routeMatch()->getParameters()->all();
  if (!empty($parameters)) {
    foreach ($parameters as $parameter) {
      if ($parameter instanceof GroupInterface) {
        $group = $parameter;
        break;
      }
      elseif ($parameter instanceof ContentEntityInterface   || $parameter instanceof OverridesSectionStorage) {
        // If in layout builder, grab the entity from section storage.
        if ($parameter instanceof OverridesSectionStorage) {
          $contexts = $parameter->getContexts();
          $entity = $contexts['entity']->getContextData()->getValue();
        }
        else {
          $entity = $parameter;
        }
        $group_contents = GroupContent::loadByEntity($entity);
        foreach ($group_contents as $group_content) {
          $group = $group_content->getGroup();
        }
        break;
      }
    }

    // Accounts for getting group when using the paragraphs embed plugin.
    if (empty($group)) {
      $query = \Drupal::request()->query->all();
      // CKEditor4 place to look.
      if (isset($query['opener_parameters']['group'])) {
        $group_id = $query['opener_parameters']['group'];
      }

      // CKEditor5 place to look.
      if (isset($query['group'])) {
        $group_id = $query['group'];
      }

      if (!empty($group_id)) {
        $group = Group::load($group_id);
      }
    }


    // If we have a group object, add group id as a query parameter
    // to the opener parameters and rebuild query for media library
    // ckeditor widgets. The MediaLibraryState will preserve the group id.
    if (isset($group)) {
      foreach ($settings['editor']['formats'] as $format => $setting) {
        // Accommodate changes required per editor as settings are different.
        switch ($setting['editor']) {
          case 'ckeditor5':
            _add_ckeditor5_settings($settings, $setting, $group, $format);
            break;
          case 'ckeditor':
            _add_ckeditor4_settings($settings, $setting, $group, $format);
            break;
        }
      }
    }
  }
}

/**
 * Adds CKEditor5 specific settings for adding group ID context to media.
 *
 * @param $settings
 *   The array of settings that will be
 * @param mixed $setting
 *   The speicifc setrting
 * @param \Drupal\group\Entity\GroupInterface $group
 *   The group that we're adding context for.
 * @param string $format
 *   The text format machine name.
 */
function _add_ckeditor5_settings(&$settings, mixed $setting, GroupInterface $group, string $format): void {
  foreach ($setting['editorSettings']['config'] as $key => $value) {
    if ($key == 'drupalMedia') {
      $url = $value['libraryURL'];
      $new_url = _media_library_opener_parameters_alter($url, $group);
      $settings['editor']['formats'][$format]['editorSettings']['config'][$key]['libraryURL'] = $new_url;
    }

    if ($key == 'drupalInlineMedia') {
      $url = $value['libraryURL'];
      $new_url = _media_library_opener_parameters_alter($url, $group);
      $settings['editor']['formats'][$format]['editorSettings']['config'][$key]['libraryURL'] = $new_url;
    }

    // Add group ID as query parameter for embeddedParagraph plugin.
    if ($key == 'embeddedParagraph') {
      $opener_params = $value['openerParameters'];
      $opener_params .= '&group=' . $group->id();
      $settings['editor']['formats'][$format]['editorSettings']['config'][$key]['openerParameters'] = $opener_params;
    }
  }
}

/**
 * Adds CKEditor4 specific settings for adding group ID context to media.
 *
 * @param $settings
 *   The array of settings that will be
 * @param mixed $setting
 *   The speicifc setrting
 * @param \Drupal\group\Entity\GroupInterface $group
 *   The group that we're adding context for.
 * @param string $format
 *   The text format machine name.
 */
function _add_ckeditor4_settings(&$settings, mixed $setting, $group, $format): void {
  foreach ($setting['editorSettings'] as $key => $value) {
    if (strpos($key, 'MediaLibrary_url')) {
      $new_url = _media_library_opener_parameters_alter($value, $group);
      $settings['editor']['formats'][$format]['editorSettings'][$key] = $new_url;
    }

    // Add group ID as query parameter for DrupalParagraph entity embed.
    if ($key == 'DrupalParagraph_openerParameters') {
      $parts = parse_url($value);
      parse_str($parts['path'], $query);
      $query['opener_parameters']['group'] = $group->id();
      $out = http_build_query($query);
      $settings['editor']['formats'][$format]['editorSettings'][$key] = $out;
    }
  }
}

/**
 * Helper method to add the group ID as a media library opener parameter.
 *
 * This provides the media library group ID so that we can add the media item to
 * the correct web area.
 * @see \epa_web_areas_group_media_submit
 *
 * @param string $url
 *   The current media library url.
 * @param \Drupal\group\Entity\GroupInterface $group
 *   The group we're adding as a parameter.
 *
 * @return string
 *   The altered url including the group as a parameter.
 */
function _media_library_opener_parameters_alter(string $url, GroupInterface $group) {
  $parts = parse_url($url);
  parse_str($parts['query'], $query);
  if ('media_inline_embed.opener.editor' == $query['media_library_opener_id'] && array_key_exists('document', $query['media_library_allowed_types'])) {
    // Make document tab appear first.
    array_unshift($query['media_library_allowed_types'], 'document');
    $query['media_library_allowed_types'] = array_unique($query['media_library_allowed_types']);
    $query['media_library_selected_type'] = 'document';
  }
  // Open the table view of the picker by default.
  $query['views_display_id'] = 'widget_table';
  $query['media_library_opener_parameters']['group'] = $group->id();
  $query['hash'] = MediaLibraryState::create($query['media_library_opener_id'], $query['media_library_allowed_types'], $query['media_library_selected_type'], $query['media_library_remaining'], $query['media_library_opener_parameters'])->getHash();
  $query = http_build_query($query);
  return implode('?', [$parts['path'], $query]);
}

/**
 * Custom submit handler for media.
 */
function epa_web_areas_group_media_submit($form, FormStateInterface $form_state) {
  // Get the added media.
  $media_items = $form_state->get('media') ?: [];

  // Check for the media library state.
  $form_storage = $form_state->getStorage();
  if (!empty($form_storage['media_library_state'])) {
    // Get group id from the opener parameters or from the form action.
    $opener_parameters = $form_storage['media_library_state']->getOpenerParameters();
    if (!empty($opener_parameters['group'])) {
      $group_id = $opener_parameters['group'];
    }

    // Add group content for the media and create a relationship to the group.
    if (isset($group_id)) {
      $entity_type_manager = \Drupal::entityTypeManager();
      foreach ($media_items as $media) {
        $group = $entity_type_manager->getStorage('group')->load($group_id);
        $group->addContent($media, 'group_media:' . $media->bundle());
      }
    }
  }
}

/**
 * Alter local actions plugins.
 *
 * @param array $local_actions
 *   The array of local action plugin definitions, keyed by plugin ID.
 *
 * @see \Drupal\Core\Menu\LocalActionInterface
 * @see \Drupal\Core\Menu\LocalActionManager
 *
 * @ingroup menu
 */
function epa_web_areas_menu_local_actions_alter(&$local_actions) {
  $local_actions['group_content.group_node_add_page']['appears_on'] = ['entity.group.canonical'];
  $local_actions['group_content.group_node_relate_page']['appears_on'] = ['entity.group.canonical'];
}

/**
 * Provides dynamic titles for some of our Group-related Page Manager pages.
 */
function epa_web_areas_get_title($group, $page_manager_page_variant = NULL, $page_manager_page = NULL) {
  if (is_string($page_manager_page)) {
    return 'Page Not Found';
  }
  switch ($page_manager_page->id()) {
    case 'group_details':
      return t('Details for %group', ['%group' => $group->label()]);

    break;
    case 'group_published_content':
      return t('Published content in %group', ['%group' => $group->label()]);

    break;
    case 'group_view':
      return t('Content in %group', ['%group' => $group->label()]);

  }

}

/**
 * Implements hook_toolbar().
 */
function epa_web_areas_toolbar() {
  $items['epa_web_areas'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('My Web Areas'),
      '#url' => Url::fromUri('base://admin/content/my-web-areas'),
      '#options' => [
        'attributes' => [
          'title' => t('My Web Areas'),
        ],
      ],
    ],
    '#weight' => 0,
  ];
  return $items;
}

/**
 * Implements hook_module_implements_alter().
 */
function epa_web_areas_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'entity_access' && isset($implementations['group'])) {
    unset($implementations['group']);
  }
}

/**
 * Implements hook_entity_access().
 */
function epa_web_areas_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->getEntityTypeId() == 'node' && $operation == 'clone') {
    $operation = 'update';
  }

  // Allow all of our users to view the group relationships.  Needed in order
  // to show the group role membership info on profile pages. There does not
  // appear to be a way to grant this to authenticated users via the normal
  // permissions exposed by the group module.
  if ($entity->getEntityTypeId() == 'group_content' && $operation == 'view' && $account->isAuthenticated()) {
    return AccessResult::allowed();
  }
  return group_entity_access($entity, $operation, $account);
}

/**
 * Implements hook_views_data_alter().
 */
function epa_web_areas_views_data_alter(array &$data) {
  $data['group_content_field_data']['users_in_groups'] = [
    'title' => t('User\'s groups'),
    'filter' => [
      'title' => t('User\'s groups'),
      'help' => t('Filters on the groups the user is a member of.'),
      'field' => 'gid',
      'id' => 'epa_web_areas_users_groups',
    ],
  ];

  $data['search_api_index_media']['users_in_groups'] = [
    'title' => t('In user\'s groups'),
    'filter' => [
      'title' => t('In user\'s groups'),
      'help' => t('Filters content that belongs to groups the user is a member of.'),
      'field' => 'gid',
      'id' => 'epa_search_api_web_areas_users_groups',
    ],
  ];

  if (!empty($data["search_api_index_media"]["gid"]["filter"])) {
    $data["search_api_index_media"]["gid"]["filter"]['field_name'] = 'gid';
    $data["search_api_index_media"]["gid"]["filter"]['entity_type'] = 'group_content';
    $data["search_api_index_media"]["gid"]["filter"]['id'] = 'search_api_entity_reference';
  }
}
