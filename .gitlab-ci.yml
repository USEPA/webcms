# WebCMS GitLab CI/CD Pipeline Configuration
# Orchestrates complete deployment pipeline for EPA WebCMS Drupal application.
# Handles infrastructure provisioning, Docker builds, security scanning, and deployments.
# See docs/cicd-pipeline.md and docs/gitlab_ci_documentation.md for detailed documentation.

stages:
  # Infrastructure Provisioning (live branch only)
  - infrastructure_preprod_build      # Build Traefik reverse proxy image
  - infrastructure_preprod_init       # Initialize Terraform backend and providers
  - infrastructure_preprod_validate   # Validate Terraform configuration syntax
  - infrastructure_preprod_plan       # Generate Terraform execution plan
  - infrastructure_preprod_apply      # Apply infrastructure changes (manual approval required)

  # Docker Image Builds (all branches)
  - build                             # Build application Docker images (drupal, nginx, drush, metrics)
  - copy                              # Mirror third-party images to ECR (CloudWatch agent)
  - Image Scan                        # Security scan images with Prisma Cloud

  # Production Deployment (live branch → WEBCMS_SITE: dev)
  - deploy:dev:init:en                # Initialize English production deployment
  - deploy:dev:validate:en            # Validate English production Terraform config
  - deploy:dev:plan:en                # Plan English production deployment
  - deploy:dev:apply:en               # Apply English production deployment

  - deploy:dev:init:es                # Initialize Spanish production deployment
  - deploy:dev:validate:es            # Validate Spanish production Terraform config
  - deploy:dev:plan:es                # Plan Spanish production deployment
  - deploy:dev:apply:es               # Apply Spanish production deployment

  # Development Deployment (development branch → WEBCMS_SITE: development)
  - deploy:development:init           # Initialize development deployment (English only)
  - deploy:development:validate       # Validate development Terraform config
  - deploy:development:plan           # Plan development deployment
  - deploy:development:apply          # Apply development deployment (automatic)

  # Staging Deployment (staging branch → WEBCMS_SITE: stage)
  - deploy:stage:init                 # Initialize staging deployment (English + Spanish)
  - deploy:stage:validate             # Validate staging Terraform config
  - deploy:stage:plan                 # Plan staging deployment
  - deploy:stage:apply                # Apply staging deployment (manual approval)

  # Database Updates (Drush operations via ECS tasks)
  - update:es                         # Run Drush updates for Spanish sites
  - update:en                         # Run Drush updates for English sites

  # Release Management
  - artifacts                         # Create deployment artifacts
  - release                           # Create GitLab releases

  # Security Scanning (GitLab built-in)
  - test                              # Run SAST, dependency scanning, secret detection

# Global Pipeline Configuration
# Our GitLab runner environment is Docker-based, so we apply this tag to every step.
default:
  tags:
    - docker

  # Global caching strategy (fallback/shared cache across all jobs):
  # More specific caches are defined in templates and override this:
  # - Terraform: Lines 116-123 (cached by module + .terraform.lock.hcl for provider binaries)
  # - Composer:  Lines 335-340 (cached by branch for PHP dependencies in Drupal builds)
  # - npm:       Lines 270-278 (cached by ci/package-lock.json for Drush automation)
  cache:
    key: global-$CI_COMMIT_REF_SLUG
    paths:
      - .gitlab-ci-cache/  # General-purpose cache directory for miscellaneous artifacts

# Define this variable once here and allow it to cascade down into jobs and child
# pipelines. Creates unique image tags based on branch and commit for reproducible builds.
variables:
  WEBCMS_IMAGE_TAG: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA

# Include GitLab's built-in security scanning templates for comprehensive security testing
include:
  - template: Jobs/SAST.gitlab-ci.yml              # Static Application Security Testing
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml  # Scan for vulnerable dependencies
  - template: Jobs/Secret-Detection.gitlab-ci.yml     # Detect exposed secrets in code

#region Templates
# Reusable job templates that provide common configuration for pipeline jobs.
# Concrete jobs extend these templates and override variables/stages as needed.

# Base Terraform Template (.terraform)
# Provides common configuration for all Terraform jobs:
# - Terraform CLI image and automation settings
# - Variable mapping from GitLab to Terraform conventions
# - Provider caching for faster builds
# - Backend configuration setup
.terraform:
  image:
    name: registry.gitlab.com/gitlab-org/terraform-images/releases/0.14:latest
    entrypoint: ['']

  variables:
    # Derive the root from the project directory and module name
    TF_ROOT: $CI_PROJECT_DIR/terraform/$TF_MODULE

    # Tell Terraform we are running in automation and should fail if it finds missing inputs
    # instead of attempting to read from the console.
    TF_INPUT: '0'
    TF_IN_AUTOMATION: '1'

    # Proxy input variables from our convention to variables recognizable by Terraform. We
    # can do this unconditionally because Terraform only inspects the environment when it
    # sees a declaration, sparing us from spurious warnings about values for undeclared
    # variables.
    TF_VAR_environment: ${WEBCMS_ENVIRONMENT}
    TF_VAR_site: ${WEBCMS_SITE}
    TF_VAR_lang: ${WEBCMS_LANG}
    TF_VAR_image_tag: ${WEBCMS_IMAGE_TAG}
    TF_VAR_aws_region: ${AWS_REGION}

  # Enhanced caching strategy for Terraform:
  # - Cache by module and branch for provider binaries
  # - Cache by commit for plan artifacts
  # - Separate cache for different environments to avoid conflicts
  cache:
    key: 
      files:
        - terraform/${TF_MODULE}/.terraform.lock.hcl
      prefix: tf-${TF_MODULE}-${CI_COMMIT_REF_SLUG}
    paths:
      - ${TF_ROOT}/.terraform
      - ${TF_ROOT}/.terraform.lock.hcl

  # Every job begins execution in the module's root directory with:
  # 1. An empty http backend configuration to be filled in by the gitlab-terraform helper,
  #    and
  # 2. A copy of the GitLab-injected TERRAFORM_TFVARS file variable. (This variable is a
  #    reference to a path in a temporary directory, so we copy it in order to allow
  #    Terraform to see it automatically.)
  #
  # We do not explicitly invoke `gitlab-terraform init` because the helper script does
  # this automatically as needed.
  before_script:
    - cd $TF_ROOT
    - cp $backend_tf backend.tf
    - cp "$TERRAFORM_TFVARS" terraform.tfvars

# Terraform Initialization Template (.init)
# Initializes Terraform backend and downloads provider plugins.
# This template is extended by concrete infrastructure jobs that set TF_MODULE and other variables.
# The init process configures the GitLab-managed HTTP backend for remote state storage.
.init:
  extends: .terraform
  stage: infrastructure_preprod_init

  script:
    - gitlab-terraform init -upgrade  # Update provider versions to match lock file
    - gitlab-terraform init            # Initialize backend and download providers

# Terraform Validation Template (.validate)
# Validates Terraform configuration syntax and checks for logical errors.
# This template is extended by concrete jobs that add explicit 'needs' dependencies on init jobs.
# Validation runs independently for each module/environment combination.
.validate:
  extends: .terraform
  stage: infrastructure_preprod_validate

  script:
    - gitlab-terraform validate  # Validate configuration syntax and internal consistency

# Terraform Planning Template (.plan)
# Generates execution plan showing what infrastructure changes will be applied.
# This template is extended by concrete jobs that add explicit 'needs' dependencies on validate jobs.
# Creates both binary plan cache (for apply) and JSON report (for GitLab MR integration).
.plan:
  extends: .terraform
  stage: infrastructure_preprod_plan

  script:
    - gitlab-terraform plan       # Generate binary execution plan
    - gitlab-terraform plan-json  # Generate JSON plan for GitLab integration

  artifacts:
    name: plan  # Generic name; concrete jobs should override with semantic naming
    paths:
      - $TF_ROOT/plan.cache  # Binary plan file used by apply jobs
    reports:
      terraform: $TF_ROOT/plan.json  # JSON plan displayed in GitLab MR widget

# Terraform Apply Template (.apply)
# Executes the Terraform plan to apply infrastructure changes.
# This template is extended by concrete jobs that add explicit 'needs' and 'dependencies' on plan jobs.
# Includes safety rules to prevent unauthorized deployments to production AWS resources.
.apply:
  extends: .terraform
  stage: infrastructure_preprod_apply  # Note: Concrete jobs override this for environment-specific stages

  # Concrete jobs must specify dependencies to download plan artifacts from the corresponding plan job.
  # Template cannot specify this generically as job names vary by environment.
  dependencies: []  # Placeholder; override in concrete jobs

  script:
    - gitlab-terraform apply  # Execute the cached plan without re-planning

  # Safety rules to control when infrastructure changes can be applied.
  # These rules provide defense-in-depth against accidental deployments.
  #
  # Rule evaluation uses "first match wins" logic:
  # 1. Infrastructure module changes require manual approval on main/live branches
  #    (prevents accidental changes to VPC, ECS clusters, load balancers, etc.)
  # 2. WebCMS module changes (ECS task definitions, service configs) run automatically
  #    on integration/main/live branches as they are lower-risk and frequently updated
  # 3. All other scenarios are denied by default (safety net for misconfigurations)
  rules:
    - if: >-
        $TF_MODULE == "infrastructure" &&
        ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "live")
      when: manual  # Require human approval for core infrastructure changes

    - if: >-
        $TF_MODULE == "webcms" &&
        ($CI_COMMIT_BRANCH == "integration" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "live")
      when: on_success  # Auto-apply application deployment changes

    - when: never  # Deny all other apply attempts (safety net)

# Job Template Definitions
# These templates provide reusable configurations for different types of pipeline jobs.
# Each template extends the base .terraform template and adds specific functionality.

# Infrastructure Template (.infrastructure)
# Handles AWS infrastructure provisioning using the terraform/infrastructure module
# Creates VPC, ECS cluster, load balancers, S3 buckets, and other shared resources
.infrastructure:
  extends: .terraform
  tags:
    - docker
  variables:
    TF_MODULE: infrastructure
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/dev

# Build Template (.build)
# Triggers child pipeline for Docker image building using Kaniko
# Builds Drupal, Nginx, Drush, and metrics container images
.build:
  stage: build

  trigger:
    include: .gitlab/docker.yml
    strategy: depend

# Deploy Template (.deploy)
# Manages ECS service and task definition deployments using terraform/webcms module
# Updates application infrastructure per site/language combination
.deploy:
  stage: deploy
  extends: .terraform
  tags:
    - docker

  variables:
    TF_MODULE: webcms
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${WEBCMS_SITE}-webcms-$WEBCMS_LANG

# Update Template (.update)
# Runs Drush database maintenance operations via ECS task invocation after deployments.
# Executes operations like database updates (drush updb), config import (drush cim),
# and cache clearing on the deployed Drupal environment.
#
# Uses Node.js 18 (current LTS) to run the ci/drush.js automation script which:
# - Invokes ECS RunTask API to execute Drush commands in the drush container
# - Streams CloudWatch logs back to the pipeline for visibility
# - Reports success/failure based on task exit code
.update:
  stage: update  # Note: Concrete jobs override this with language-specific stages (update:en, update:es)

  # Node.js 18 LTS (Alpine variant for smaller image size)
  image:
    name: node:18-alpine
    entrypoint: ['']  # Override entrypoint to allow direct command execution

  script:
    - cd $CI_PROJECT_DIR/ci
    - npm ci --production --prefer-offline --cache .npm  # Install AWS SDK and dependencies
    - node drush.js  # Execute Drush automation via ECS RunTask API

  # Cache npm dependencies using package-lock.json for precise invalidation.
  # Significantly speeds up update jobs by avoiding repeated package downloads.
  cache:
    key:
      files:
        - ci/package-lock.json  # Cache invalidates only when dependencies change
      prefix: npm-drush
    paths:
      - ci/node_modules/  # Cached installed packages
      - ci/.npm           # npm's internal cache
    policy: pull-push    # Both read and write cache (first job creates, others reuse)

# Environment-Specific Deployment Templates
# These templates reduce duplication by providing common configurations for each deployment environment

# Production Environment Template (live branch → WEBCMS_SITE: dev)
# Deploys to production environment with both English and Spanish languages
# Requires manual approval for infrastructure changes, automatic for application updates
.deploy:production:
  extends: .deploy
  variables:
    WEBCMS_ENVIRONMENT: preproduction
    WEBCMS_SITE: dev
  rules:
    - if: '$CI_COMMIT_BRANCH == "live"'

# Staging Environment Template (staging branch → WEBCMS_SITE: stage)
# Deploys to staging environment for final testing before production.
# Supports both English and Spanish languages.
.deploy:staging:
  extends: .deploy
  variables:
    WEBCMS_ENVIRONMENT: preproduction  # AWS account tier (same as dev/production)
    WEBCMS_SITE: stage                 # Logical site identifier within environment
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'

# Development Environment Template (development branch → WEBCMS_SITE: development)
# Deploys to development environment for new feature testing
# English-only environment with automatic deployments
.deploy:development:
  extends: .deploy
  variables:
    WEBCMS_ENVIRONMENT: preproduction
    WEBCMS_SITE: development
    WEBCMS_LANG: en
    TF_STATE_NAME: development-webcms
  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'

# Kaniko Build Template (.kaniko)
# Base template for all Docker image builds using Kaniko (GitLab-compatible Docker builder)
# Configures ECR authentication and layer caching for efficient builds
# Includes caching for Composer dependencies to speed up PHP builds
.kaniko:
  image:
    name: registry.epa.gov/dso/infra/kaniko-executor:debug
    entrypoint: ['']

  variables:
    KANIKO_CACHE_ARGS: --cache --cache-repo=$WEBCMS_REPO_URL/webcms-$WEBCMS_ENVIRONMENT-cache

  # Cache Composer dependencies and other build artifacts
  # This significantly speeds up subsequent builds by reusing downloaded packages
  cache:
    key: composer-$CI_COMMIT_REF_SLUG
    paths:
      - services/drupal/vendor/
      - services/drupal/composer.lock
    policy: pull  # Only pull cache, don't push (Kaniko handles layer caching)

  before_script:
    - mkdir -p /kaniko/.docker
    - echo '{"credsStore":"ecr-login"}' >/kaniko/.docker/config.json
    - echo $WEBCMS_REPO_URL/webcms-$WEBCMS_ENVIRONMENT-$WEBCMS_SITE-$WEBCMS_TARGET:$WEBCMS_IMAGE_TAG

#endregion

#region Image Builds
# Docker image build jobs using Kaniko (rootless, GitLab-compatible Docker builder).
# Builds application containers and mirrors third-party images to ECR.

# Drupal Application Build Job
# Builds the main Drupal application container with PHP-FPM
# Uses matrix build to create multiple variants (drupal, nginx, drush)
# Only runs when relevant Drupal files change to optimize build times
build:drupal:
  extends: .kaniko
  stage: build
  rules:
    - changes:
        - services/drupal/**/*
        - .gitlab-ci.yml
        - .gitlab/docker.yml
      when: always
    - if: '$CI_COMMIT_TAG'
      variables:
        WEBCMS_IMAGE_TAG: $CI_COMMIT_TAG
      when: always
    - if: '$CI_COMMIT_BRANCH == "live"'
      variables:
        WEBCMS_SITE: dev
      when: always
    - if: '$CI_COMMIT_BRANCH == "staging"'
      variables:
        WEBCMS_SITE: stage
      when: always
    - if: '$CI_COMMIT_BRANCH == "development"'
      variables:
        WEBCMS_SITE: development
      when: always

   # Matrix builds three container variants from services/drupal/Dockerfile.
   # Build order (drupal, nginx, drush) optimizes layer caching: drupal builds expensive
   # layers first (ElastiCache client, theme compilation) which nginx/drush then reuse.
  parallel:
    matrix:
      - WEBCMS_TARGET: [drupal, nginx, drush]  # PHP-FPM, web server, CLI containers

   # In addition to the shared cache arguments, we provide additional settings to tune
   # Kaniko's caching behavior. This is due to the large number of files and steps in the
   # WebCMS Dockerfile:
   #
   # - We skip stages that don't apply to this build target.
   #
   # - We use the faster but less accurate redo snapshot mode, under the assumption that
   #   changes in files like composer.json or custom modules will be sufficient to disrupt
   #   the metadata cache.
   #
   # - We opt in to the (experimental) "new run" system to detect when to re-execute RUN
   #   instructions. According to the Kaniko documentation, "[i]n some cases, this may
   #   improve build performance by 75%".
  script:
    - cp $auth_json $CI_PROJECT_DIR/services/drupal/auth.json
    - /kaniko/executor
      $KANIKO_CACHE_ARGS
      --skip-unused-stages
      --snapshotMode=redo
      --use-new-run
      --context=$CI_PROJECT_DIR/services/drupal
      --build-arg GIT_COMMIT=$CI_COMMIT_SHA
      --build-arg GIT_TAG=$CI_COMMIT_TAG
      --target=$WEBCMS_TARGET
      --destination=$WEBCMS_REPO_URL/webcms-$WEBCMS_ENVIRONMENT-$WEBCMS_SITE-$WEBCMS_TARGET:$WEBCMS_IMAGE_TAG
      --destination=$CI_REGISTRY_IMAGE/webcms-$WEBCMS_ENVIRONMENT-$WEBCMS_SITE-$WEBCMS_TARGET:$WEBCMS_IMAGE_TAG
      
  variables:
    WEBCMS_ENVIRONMENT: preproduction

# Build the FPM metrics sidecar container.
build:metrics:
  extends: .kaniko
  stage: build
  rules:
    - changes:
        - services/metrics/**/*
        - .gitlab-ci.yml
      when: always
    - if: '$CI_COMMIT_TAG'
      variables:
        WEBCMS_IMAGE_TAG: $CI_COMMIT_TAG
      when: always
    - if: '$CI_COMMIT_BRANCH == "live"'
      variables:
        WEBCMS_SITE: dev
      when: always
    - if: '$CI_COMMIT_BRANCH == "staging"'
      variables:
        WEBCMS_SITE: stage
      when: always
    - if: '$CI_COMMIT_BRANCH == "development"'
      variables:
        WEBCMS_SITE: development
      when: always

  script:
    - /kaniko/executor
      $KANIKO_CACHE_ARGS
      --context=$CI_PROJECT_DIR/services/metrics
      --build-arg GIT_COMMIT=$CI_COMMIT_SHA
      --build-arg GIT_TAG=$CI_COMMIT_TAG
      --destination=$WEBCMS_REPO_URL/webcms-$WEBCMS_ENVIRONMENT-$WEBCMS_SITE-fpm-metrics:$WEBCMS_IMAGE_TAG      --destination=$CI_REGISTRY_IMAGE/webcms-$WEBCMS_ENVIRONMENT-$WEBCMS_SITE-fpm-metrics:$WEBCMS_IMAGE_TAG
  variables:
    WEBCMS_ENVIRONMENT: preproduction
    
#endregion

#region Docker Hub Mirrors
# Mirror third-party images from Docker Hub to ECR for network isolation and availability.
# Uses Kaniko to pull, retag, and push images without requiring Docker daemon access.

 # As mentioned in the comments above, this stage is for mirroring Docker Hub images. Our
 # GitLab CI/CD environment is restricted - we aren't permitted access to the Docker daemon
 # and thus can't use Docker-in-Docker. Fortunately, we can slightly misuse Kaniko to
 # accomplish this task by creating an empty workspace with a single-line Dockerfile
 # referencing the image and tag we want to mirror. By performing a "build" in this
 # workspace, Kaniko will pull the image, retag it with the ECR destination, and push it.
 # This bypasses the need for the `docker pull` and `docker push` commands.

 # Jobs in this stage will almost always only execute on branches that track AWS
 # infrastructure: this typically means that we mirror only on the main and live branches.

# Mirror the AWS CloudWatch agent image using the latest tag.
copy:cloudwatch:
  extends: .kaniko
  stage: copy
  rules:
    - if: '$CI_COMMIT_TAG'
      variables:
        WEBCMS_IMAGE_TAG: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_BRANCH == "live"'
    - if: '$CI_COMMIT_BRANCH == "staging"'

  script:
    - mkdir -p /workspace
    - echo 'FROM amazon/cloudwatch-agent' >/workspace/Dockerfile
    - /kaniko/executor
      --context=/workspace
      --build-arg GIT_COMMIT=$CI_COMMIT_SHA
      --build-arg GIT_TAG=$CI_COMMIT_TAG
      --destination=$WEBCMS_REPO_URL/webcms-$WEBCMS_ENVIRONMENT-aws-cloudwatch      --destination=$CI_REGISTRY_IMAGE/webcms-$WEBCMS_ENVIRONMENT-aws-cloudwatch
      
  variables:
    WEBCMS_ENVIRONMENT: preproduction

# Build custom Traefik image based on version 2.4
# Uses "latest" tag as specified in terraform/infrastructure/traefik_service.tf
build:traefik:
  extends: .kaniko
  stage: infrastructure_preprod_build
  rules:
    - changes:
        - services/traefik/**/*
        - .gitlab-ci.yml
      when: always
    - if: '$CI_COMMIT_TAG'
      variables:
        WEBCMS_IMAGE_TAG: $CI_COMMIT_TAG
      when: always
    - if: '$CI_COMMIT_BRANCH == "live"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "staging"'
      when: always
  script:
    - /kaniko/executor
      $KANIKO_CACHE_ARGS
      --context=$CI_PROJECT_DIR/services/traefik
      --build-arg GIT_COMMIT=$CI_COMMIT_SHA
      --build-arg GIT_TAG=$CI_COMMIT_TAG
      --destination=$WEBCMS_REPO_URL/webcms-$WEBCMS_ENVIRONMENT-traefik:latest      --destination=$CI_REGISTRY_IMAGE/webcms-$WEBCMS_ENVIRONMENT-traefik:latest
  variables:
    WEBCMS_ENVIRONMENT: preproduction

# Note: Additional security scanning jobs for container images are configured
# in Prisma Cloud. These jobs scan built images for vulnerabilities and may include
# separate jobs for Drupal, Nginx, Drush, Metrics, and Traefik images.


#region Preproduction AWS Account

# Preproduction AWS Account Jobs
# These jobs manage infrastructure and application deployments in the preproduction AWS account.
# This account hosts multiple logical environments: development site, staging site, and production (dev) site.
# All share WEBCMS_ENVIRONMENT=preproduction but differ by WEBCMS_SITE variable.

# Infrastructure Provisioning Jobs (live branch only)
# Creates/updates shared AWS resources: VPC, ECS cluster, load balancers, S3 buckets, etc.
infrastructure:preproduction:init:
  extends: .infrastructure
  stage: infrastructure_preprod_init
  rules:
    - if: '$CI_COMMIT_BRANCH == "live"'
  variables:
    WEBCMS_ENVIRONMENT: preproduction
    TF_STATE_NAME: dev
  script:
    - gitlab-terraform init -upgrade
    - gitlab-terraform init
  environment:
    name: infra/preproduction

infrastructure:preproduction:validate:
  extends: .infrastructure
  stage: infrastructure_preprod_validate
  needs: ["infrastructure:preproduction:init"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "live"'
  variables:
    WEBCMS_ENVIRONMENT: preproduction
    TF_STATE_NAME: dev
  script:
    - gitlab-terraform init -upgrade
    - gitlab-terraform validate
  environment:
    name: infra/preproduction

infrastructure:preproduction:plan:
  extends: .infrastructure
  stage: infrastructure_preprod_plan
  needs: ["infrastructure:preproduction:validate"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "live"'
  variables:
    WEBCMS_ENVIRONMENT: preproduction
    TF_STATE_NAME: dev
  script:
    - gitlab-terraform init -upgrade
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  timeout: 24h
  environment:
    name: infra/preproduction
  artifacts:
    name: terraform-plan-infrastructure-${WEBCMS_SITE}-${CI_COMMIT_SHORT_SHA}
    paths:
      - $TF_ROOT/plan.cache
    reports:
      terraform: $TF_ROOT/plan.json
    expire_in: 7 days  # Infrastructure plans need review before manual approval

infrastructure:preproduction:apply:
  extends: .infrastructure
  stage: infrastructure_preprod_apply
  needs: ["infrastructure:preproduction:plan"]
  dependencies: ["infrastructure:preproduction:plan"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "live"'
  variables:
    WEBCMS_ENVIRONMENT: preproduction
    TF_STATE_NAME: dev
  script:
    - gitlab-terraform init -upgrade
    - gitlab-terraform apply
  environment:
    name: infra/preproduction

#endregion

#region Production Deployment Jobs (live branch → WEBCMS_SITE: dev)
# Deploys application to production environment (English and Spanish)
# Uses resource groups to prevent concurrent deployments to same site/language

# Initialize Terraform for production deployments
deploy:dev:init:en:
  extends: .deploy:production
  stage: deploy:dev:init:en
  variables:
    WEBCMS_LANG: en
    TF_STATE_NAME: dev-webcms-$WEBCMS_LANG
  resource_group: site/dev-$WEBCMS_LANG
  environment:
    name: site/dev-$WEBCMS_LANG
  script:
    - echo $TF_ADDRESS
    - gitlab-terraform init

deploy:dev:init:es:
  extends: .deploy:production
  stage: deploy:dev:init:es
  variables:
    WEBCMS_LANG: es
    TF_STATE_NAME: dev-webcms-$WEBCMS_LANG
  resource_group: site/dev-$WEBCMS_LANG
  environment:
    name: site/dev-$WEBCMS_LANG
  script:
    - echo $TF_ADDRESS
    - gitlab-terraform init


# Validate Terraform configuration for production deployments
deploy:dev:validate:en:
  extends: .deploy:production
  stage: deploy:dev:validate:en
  needs: ["deploy:dev:init:en"]  # Depends on init; runs in parallel with builds and other language validations
  variables:
    WEBCMS_LANG: en
    TF_STATE_NAME: dev-webcms-$WEBCMS_LANG
  environment:
    name: site/dev-$WEBCMS_LANG
  script:
    - gitlab-terraform validate

deploy:dev:validate:es:
  extends: .deploy:production
  stage: deploy:dev:validate:es
  needs: ["deploy:dev:init:es"]  # Depends on init; runs in parallel with builds and other language validations
  variables:
    WEBCMS_LANG: es
    TF_STATE_NAME: dev-webcms-$WEBCMS_LANG
  environment:
    name: site/dev-$WEBCMS_LANG
  script:
    - gitlab-terraform validate

# Generate Terraform plans for production deployments
deploy:dev:plan-en:
  extends: .deploy:production
  stage: deploy:dev:plan:en
  needs: ["deploy:dev:validate:en"]  # Depends on validation; runs in parallel with builds and other language plans
  variables:
    WEBCMS_LANG: en
    TF_STATE_NAME: dev-webcms-$WEBCMS_LANG
  resource_group: site/dev-$WEBCMS_LANG  # Prevents concurrent plan/apply to same site/language
  environment:
    name: site/dev-$WEBCMS_LANG
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: terraform-plan-webcms-${WEBCMS_SITE}-en-${CI_COMMIT_SHORT_SHA}
    paths:
      - $TF_ROOT/plan.cache
    reports:
      terraform: $TF_ROOT/plan.json
    expire_in: 3 days  # Short retention; deployment plans applied quickly after approval

deploy:dev:plan-es:
  extends: .deploy:production
  stage: deploy:dev:plan:es
  needs: ["deploy:dev:validate:es"]  # Depends on validation; runs in parallel with builds and other language plans
  variables:
    WEBCMS_LANG: es
    TF_STATE_NAME: dev-webcms-$WEBCMS_LANG
  resource_group: site/dev-$WEBCMS_LANG  # Prevents concurrent plan/apply to same site/language
  environment:
    name: site/dev-$WEBCMS_LANG
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: terraform-plan-webcms-${WEBCMS_SITE}-es-${CI_COMMIT_SHORT_SHA}
    paths:
      - $TF_ROOT/plan.cache
    reports:
      terraform: $TF_ROOT/plan.json
    expire_in: 3 days  # Short retention; deployment plans applied quickly after approval


# Apply Terraform plans for production deployments
deploy:dev:apply-en:
  extends: .deploy:production
  stage: deploy:dev:apply:en
  needs: ["deploy:dev:plan-en", "build:drupal"]  # Waits for plan + build completion (builds run in parallel matrix)
  dependencies: ["deploy:dev:plan-en"]            # Downloads plan artifact only (not build artifacts)
  variables:
    WEBCMS_LANG: en
    TF_STATE_NAME: dev-webcms-$WEBCMS_LANG
  resource_group: site/dev-$WEBCMS_LANG  # Prevents concurrent apply operations to same site/language
  environment:
    name: site/dev-$WEBCMS_LANG
  script:
    - gitlab-terraform apply
  # Override template rules to auto-apply webcms module changes (low risk)
  # Manual approval only required for infrastructure module changes (high risk)
  rules:
    - if: >-
        $TF_MODULE == "infrastructure" &&
        ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "live")
      when: manual      # Require approval for VPC, ECS cluster, load balancer changes
    - if: >-
        $TF_MODULE == "webcms" &&
        ($CI_COMMIT_BRANCH == "integration" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "live")
      when: on_success  # Auto-apply task definition and service config changes
    - when: never       # Deny all other scenarios

deploy:dev:apply-es:
  extends: .deploy:production
  stage: deploy:dev:apply:es
  needs: ["deploy:dev:plan-es", "build:drupal"]  # Waits for plan + build completion (builds run in parallel matrix)
  dependencies: ["deploy:dev:plan-es"]
  variables:
    WEBCMS_LANG: es
    TF_STATE_NAME: dev-webcms-$WEBCMS_LANG
  resource_group: site/dev-$WEBCMS_LANG  # Prevents concurrent apply operations to same site/language
  environment:
    name: site/dev-$WEBCMS_LANG
  script:
    - gitlab-terraform apply
  # Override template rules to auto-apply webcms module changes (low risk)
  # Manual approval only required for infrastructure module changes (high risk)
  rules:
    - if: >-
        $TF_MODULE == "infrastructure" &&
        ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "live")
      when: manual      # Require approval for VPC, ECS cluster, load balancer changes
    - if: >-
        $TF_MODULE == "webcms" &&
        ($CI_COMMIT_BRANCH == "integration" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "live")
      when: on_success  # Auto-apply task definition and service config changes
    - when: never       # Deny all other scenarios

#endregion

#region Development Environment Deployments (development branch → WEBCMS_SITE: development)
# Deploys to development environment for new feature testing (English-only)

# Initialize Terraform for development deployment
deploy:development:init:
  extends: .deploy:development
  stage: deploy:development:init
  resource_group: site/development
  environment:
    name: site/development
  script:
    - echo $TF_ADDRESS
    - gitlab-terraform init

deploy:development:validate:
  extends: .deploy:development
  stage: deploy:development:validate
  needs: ["deploy:development:init"]  # Depends on init; runs in parallel with builds
  environment:
    name: site/development
  script:
    - gitlab-terraform validate

deploy:development:plan:
  extends: .deploy:development
  stage: deploy:development:plan
  needs: ["deploy:development:validate"]  # Depends on validation; runs in parallel with builds
  resource_group: site/development        # Prevents concurrent plan/apply to development site
  environment:
    name: site/development
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: terraform-plan-webcms-${WEBCMS_SITE}-${WEBCMS_LANG}-${CI_COMMIT_SHORT_SHA}
    paths:
      - $TF_ROOT/plan.cache
    reports:
      terraform: $TF_ROOT/plan.json
    expire_in: 1 day  # Short retention; development plans applied immediately (no manual gate)

deploy:development:apply:
  extends: .deploy:development
  stage: deploy:development:apply
  needs: ["deploy:development:plan", "build:drupal"]  # Waits for plan + build completion (builds run in parallel matrix)
  dependencies: ["deploy:development:plan"]            # Downloads plan artifact only (not build artifacts)
  resource_group: site/development                     # Prevents concurrent apply operations
  environment:
    name: site/development
  script:
    - gitlab-terraform apply
  # Override template rules to auto-apply all development changes (no manual gate)
  # Development environment is lower risk and requires fast iteration
  rules:
    - if: >-
        $TF_MODULE == "infrastructure" &&
        ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "live")
      when: manual      # Infrastructure module still requires approval even on development branch
    - if: >-
        $TF_MODULE == "webcms" &&
        ($CI_COMMIT_BRANCH == "development" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "live")
      when: on_success  # Auto-apply webcms changes to development environment
    - when: never       # Deny all other scenarios

#endregion

#region Staging Environment Deployment (staging branch → WEBCMS_SITE: stage)
# Deploys to staging environment for final testing before production
# Supports both English and Spanish languages with parallel matrix builds

# Initialize Terraform for staging deployments
deploy:stage:init:
  extends: .deploy:staging
  stage: deploy:stage:init
  parallel:
    matrix:
      - WEBCMS_LANG: [en, es]
  variables:
    TF_STATE_NAME: stage-webcms-$WEBCMS_LANG
  resource_group: site/stage-$WEBCMS_LANG
  environment:
    name: site/stage-$WEBCMS_LANG
  script:
    - gitlab-terraform init

deploy:stage:validate:
  extends: .deploy:staging
  stage: deploy:stage:validate
  needs: ["deploy:stage:init"]  # Depends on init (matrix job); runs in parallel with builds
  parallel:
    matrix:
      - WEBCMS_LANG: [en, es]  # Creates 2 parallel validation jobs (English + Spanish)
  variables:
    TF_STATE_NAME: stage-webcms-$WEBCMS_LANG
  resource_group: site/stage-$WEBCMS_LANG
  environment:
    name: site/stage-$WEBCMS_LANG
  script:
    - gitlab-terraform validate

deploy:stage:plan:
  extends: .deploy:staging
  stage: deploy:stage:plan
  needs: ["deploy:stage:validate"]  # Depends on validation (matrix job); runs in parallel with builds
  parallel:
    matrix:
      - WEBCMS_LANG: [en, es]  # Creates 2 parallel plan jobs (English + Spanish)
  variables:
    TF_STATE_NAME: stage-webcms-$WEBCMS_LANG
  resource_group: site/stage-$WEBCMS_LANG  # Prevents concurrent plan/apply to same site/language
  environment:
    name: site/stage-$WEBCMS_LANG
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: terraform-plan-webcms-${WEBCMS_SITE}-${WEBCMS_LANG}-${CI_COMMIT_SHORT_SHA}
    paths:
      - $TF_ROOT/plan.cache
    reports:
      terraform: $TF_ROOT/plan.json
    expire_in: 7 days  # Longer retention; staging plans require manual approval and testing review

deploy:stage:apply:
  extends: .deploy:staging
  stage: deploy:stage:apply
  needs: ["deploy:stage:plan", "build:drupal"]  # Waits for plan (matrix job) + build completion
  dependencies: ["deploy:stage:plan"]            # Downloads plan artifacts from matrix jobs (en + es)
  parallel:
    matrix:
      - WEBCMS_LANG: [en, es]  # Creates 2 parallel apply jobs (English + Spanish)
  variables:
    TF_STATE_NAME: stage-webcms-$WEBCMS_LANG
  resource_group: site/stage-$WEBCMS_LANG  # Prevents concurrent apply operations to same site/language
  environment:
    name: site/stage-$WEBCMS_LANG
  script:
    - gitlab-terraform apply

#endregion


#region Database Update Jobs (Drush Operations)
# These jobs run after deployment to apply database schema updates and clear caches
# They use ECS tasks to execute Drush commands in the deployed environment
# Resource groups prevent overlapping Drush operations on the same site/language

update:development:
  extends: .update
  stage: update:en
  needs: ["deploy:development:apply"]  # Run after deployment completes
  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'

  variables:
    WEBCMS_ENVIRONMENT: preproduction
    WEBCMS_SITE: development
    WEBCMS_LANG: en

  # Resource group prevents overlapping Drush operations on the same site
  # Environment tracking enables deployment status visibility
  resource_group: drush/development
  environment:
    name: site/development


update:stage:en:
  extends: .update
  stage: update:en
  needs: ["deploy:stage:apply"]  # Run after staging deployment completes
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'

  variables:
    WEBCMS_ENVIRONMENT: preproduction
    WEBCMS_SITE: stage
    WEBCMS_LANG: en

  # Resource group prevents overlapping Drush operations on the same site
  # Environment tracking enables deployment status visibility
  resource_group: drush/stage-en
  environment:
    name: site/stage-en

update:stage:es:
  extends: .update
  stage: update:es
  needs: ["deploy:stage:apply"]  # Run after staging deployment completes
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'

  variables:
    WEBCMS_ENVIRONMENT: preproduction
    WEBCMS_SITE: stage
    WEBCMS_LANG: es

  # Resource group prevents overlapping Drush operations on the same site
  # Environment tracking enables deployment status visibility
  resource_group: drush/stage-es
  environment:
    name: site/stage-es
update:dev:en:
  extends: .update
  stage: update:en
  needs: ["deploy:dev:apply-en"]  # Run after production English deployment completes
  rules:
    - if: '$CI_COMMIT_BRANCH == "live"'

  variables:
    WEBCMS_ENVIRONMENT: preproduction
    WEBCMS_SITE: dev
    WEBCMS_LANG: en

  # Resource group prevents overlapping Drush operations on the same site
  # Environment tracking enables deployment status visibility
  resource_group: drush/dev-$WEBCMS_LANG
  environment:
    name: site/dev-$WEBCMS_LANG

update:dev:es:
  extends: .update
  stage: update:es
  needs: ["deploy:dev:apply-es"]  # Run after production Spanish deployment completes
  rules:
    - if: '$CI_COMMIT_BRANCH == "live"'

  variables:
    WEBCMS_ENVIRONMENT: preproduction
    WEBCMS_SITE: dev
    WEBCMS_LANG: es

  # Resource group prevents overlapping Drush operations on the same site
  # Environment tracking enables deployment status visibility
  resource_group: drush/dev-$WEBCMS_LANG
  environment:
    name: site/dev-$WEBCMS_LANG

#endregion

###################
# Create Releases #
###################

# Create deployment artifacts for rollback and external deployments
artifacts:
  image: alpine
  stage: artifacts
  rules:
    - if: $CI_COMMIT_TAG != ""
      when: always
    - if: '$CI_COMMIT_BRANCH == "live"'
  script:
    - echo "Creating release artifacts for ${CI_COMMIT_REF_NAME}"
  artifacts:
    name: release-artifacts-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}
    paths:
      - ./ci
      - ./terraform/infrastructure
      - ./terraform/webcms
    expire_in: 30 days  # Release artifacts kept longer for rollback scenarios

