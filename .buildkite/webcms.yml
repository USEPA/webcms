# DEPRECATED: Buildkite pipelines are no longer used. All builds and deployments run in GitLab CI (.gitlab-ci.yml). This file is retained for historical reference. Last updated: 2025-10-09.
# This file performs a deployment of the WebCMS to a specific site. It covers
# both English and Spanish, and deploys them in parallel.
#
# The steps executed by this pipeline are as follows:
#
# 1. First, use Kaniko to build this project's Docker images. The images are
#    built in parallel using a Buildkite matrix.
# 2. We use a wait step to force Buildkite to pause until the image build
#    completed successfully. If the build failed, then we most likely wouldn't
#    have a full set of images to deploy and thus wouldn't be able to continue
#    safely.
# 3. We use the terraform.apply.yml template to run our application deployment.

env:
  WEBCMS_ENVIRONMENT: ${WEBCMS_ENVIRONMENT}
  WEBCMS_SITE: ${WEBCMS_SITE}
  WEBCMS_IMAGE_TAG: ${WEBCMS_IMAGE_TAG}
  WEBCMS_REPO_URL: ${WEBCMS_REPO_URL}

steps:
  # This grouped step is identical to that of .buildkite/feature.yml. See the
  # comments there for more information.
  - group: ":docker: Build images"
    steps:
      - label: "Build {{matrix}}"
        matrix:
          - drupal
          - nginx
          - drush

        agents:
          queue: docker-builders-arm

        concurrency_group: $BUILDKITE_PIPELINE_SLUG/build-$BUILDKITE_BRANCH
        concurrency: 4

        env:
          TARGET: '{{matrix}}'

        plugins:
          - seek-oss/aws-sm#v2.3.1:
              file:
                - path: services/drupal/auth.json
                  secret-id: forumone/composer-auth

          - cultureamp/aws-assume-role#v0.1.0:
              role: arn:aws:iam::316981092358:role/BuildkiteRoleForImageBuilds

          # Execute a Kaniko-powered build.
          - docker#v3.12.0:
              image: registry.epa.gov/dso/infra/kaniko-executor:debug
              workdir: /workspace

              propagate-aws-auth-tokens: true
              environment:
                - TARGET

              # Ensure this build script is kept in line with that of
              # feature.yml, save for the use of the --destination flag to push
              # the built image to the registry.
              entrypoint: /bin/sh
              command:
                - -ec
                - |
                    echo '{"credsStore":"ecr-login"}' >/kaniko/.docker/config.json
                    /kaniko/executor \
                      --context=/workspace/services/drupal \
                      --cache \
                      --cache-repo="${WEBCMS_REPO_URL}/webcms-${WEBCMS_ENVIRONMENT}-cache" \
                      --skip-unused-stages \
                      --snapshot-mode=redo \
                      --use-new-run \
                      --build-arg GIT_TAG="$BUILDKITE_TAG" \
                      --build-arg GIT_COMMIT="$BUILDKITE_COMMIT" \
                      --target="$$TARGET" \
                      --destination="${WEBCMS_REPO_URL}/webcms-${WEBCMS_ENVIRONMENT}-${WEBCMS_SITE}-$$TARGET:${WEBCMS_IMAGE_TAG}"

  - wait: ~

  # It's safe to deploy English and Spanish ECS Terraform in parallel since they
  # are independent at the AWS API level

  - label: ":terraform: WebCMS (${WEBCMS_SITE}-en)"
    command: buildkite-agent pipeline upload .buildkite/terraform.apply.yml

    env:
      WEBCMS_SSM_NAMESPACE: /terraform/${WEBCMS_ENVIRONMENT}/${WEBCMS_SITE}/en
      WEBCMS_TF_MODULE: webcms
      WEBCMS_SITE: ${WEBCMS_SITE}
      WEBCMS_LANG: en

  - label: ":terraform: WebCMS (${WEBCMS_SITE}-es)"
    command: buildkite-agent pipeline upload .buildkite/terraform.apply.yml

    env:
      WEBCMS_SSM_NAMESPACE: /terraform/${WEBCMS_ENVIRONMENT}/${WEBCMS_SITE}/es
      WEBCMS_TF_MODULE: webcms
      WEBCMS_SITE: ${WEBCMS_SITE}
      WEBCMS_LANG: es

  - wait: ~

  # Similarly, it's safe to run Drush on English and Spanish in parallel

  - label: ":ecs: Drush (${WEBCMS_SITE}-en)"
    concurrency_group: $BUILDKITE_PIPELINE_SLUG/drush-$WEBCMS_SITE-en
    concurrency: 1

    plugins:
      - docker#v3.8.0:
          image: node:14-alpine
          entrypoint: /bin/sh

          # We create ~/.aws/credentials and use AWS_PROFILE here instead of
          # generating session tokens because Drush can sometimes run for a very
          # long time, causing one-time tokens to expire. By using a profile,
          # the AWS SDK can refresh its session tokens.
          command:
            - -ec
            - |
              mkdir -p ~/.aws
              echo '[drush]' >> ~/.aws/credentials
              echo 'role_arn = arn:aws:iam::316981092358:role/BuildkiteRoleForECSTasks' >> ~/.aws/credentials
              echo 'credential_source = Ec2InstanceMetadata' >> ~/.aws/credentials

              cd ci
              npm ci
              AWS_PROFILE=drush node drush.js

          propagate-aws-auth-tokens: true
          environment:
            - AWS_REGION=us-east-2
            - WEBCMS_ENVIRONMENT
            - WEBCMS_SITE
            - WEBCMS_LANG=en
            - WEBCMS_IMAGE_TAG

            # Propagate the BUILDKITE=true environment variable to tell the script to link to the logs
            - BUILDKITE

  - label: ":ecs: Drush (${WEBCMS_SITE}-es)"
    concurrency_group: $BUILDKITE_PIPELINE_SLUG/drush-$WEBCMS_SITE-es
    concurrency: 1

    plugins:
      - docker#v3.8.0:
          image: node:14-alpine
          entrypoint: /bin/sh
          command:
            - -ec
            - |
              mkdir -p ~/.aws
              echo '[drush]' >> ~/.aws/credentials
              echo 'role_arn = arn:aws:iam::316981092358:role/BuildkiteRoleForECSTasks' >> ~/.aws/credentials
              echo 'credential_source = Ec2InstanceMetadata' >> ~/.aws/credentials

              cd ci
              npm ci
              AWS_PROFILE=drush node drush.js

          propagate-aws-auth-tokens: true
          environment:
            - AWS_REGION=us-east-2
            - WEBCMS_ENVIRONMENT
            - WEBCMS_SITE
            - WEBCMS_LANG=es
            - WEBCMS_IMAGE_TAG
            - BUILDKITE
